%!PS-Adobe-2.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: sig320-frank.dvi
%%CreationDate: Sat Sep  8 16:50:06 2012
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Helvetica-Bold CMSY9 Helvetica Times-Bold Times-Roman
%%+ Times-Italic CMMI9 CMR9 CMMI6
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -z -P pdf -t letter -o sig320-frank.ps
%+ sig320-frank.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2012.09.08:1650
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 90 2009-01-30 10:58:51Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
%/NArray { 
%   aload length 2 div dup dup cvi eq not { exch pop } if /n exch
%   cvi def 
%} def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  showpoints { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 26 2008-06-14 11:50:02Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end

% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 26 2008-06-14 11:50:02Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2008/04/18
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def

end
/PSTricksDotFont exch definefont pop

%% end

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginProcSet: hps.pro 0 0
%!
/HPSdict 20 dict dup begin/braindeaddistill 50 def/rfch{dup length 1 sub
1 exch getinterval}bind def/splituri{dup(#)search{exch pop}{()exch}
ifelse dup(file:)anchorsearch{pop exch pop 3 -1 roll pop false}{pop 3 -1
roll exch pop true}ifelse}bind def/lookuptarget{exch rfch dup
/TargetAnchors where{pop TargetAnchors dup 3 -1 roll known{exch get true
}{pop(target unknown:)print == false}ifelse}{pop pop
(target dictionary unknown\012)print false}ifelse}bind def/savecount 0
def/stackstopped{count counttomark sub/savecount exch store stopped
count savecount sub 1 sub dup 0 gt{{exch pop}repeat}{pop}ifelse}bind def
/tempstring 128 string def/targetvalidate{1 index dup length 127 gt exch
tempstring cvs dup(/)search{pop pop pop exch pop true exch}{pop}ifelse
token{pop length 0 ne}{true}ifelse or not}bind def/targetdump-hook where
{pop}{/targetdump-hook{dup mark exch gsave initmat setmatrix{{mark/Dest
4 2 roll targetvalidate{aload pop exch pop/Page 3 1 roll/View exch[exch
/FitH exch]/DEST pdfmark}{cleartomark}ifelse}forall}stackstopped pop
grestore}bind def}ifelse/baseurl{mark exch 1 dict dup 3 -1 roll/Base
exch put/URI exch/DOCVIEW{pdfmark}stackstopped pop}bind def
/externalhack systemdict/PDF known def/oldstyle true def/initmat matrix
currentmatrix def/actiondict 2 dict dup/Subtype/URI put def
/weblinkhandler{dup 3 1 roll mark 4 1 roll/Title 4 1 roll splituri 3 -1
roll dup length 0 gt{cvn/Dest exch 4 2 roll}{pop}ifelse{externalhack{
/HTTPFile exch}{actiondict dup 3 -1 roll/URI exch put/Action exch}
ifelse}{externalhack{/HTTPFile exch}{/File exch/Action/GoToR}ifelse}
ifelse counttomark 2 sub -1 roll aload pop/Rect 4 1 roll/Border 3 1 roll
/Color exch oldstyle{/LNK}{/Subtype/Link/ANN}ifelse gsave initmat
setmatrix{pdfmark}stackstopped grestore}bind def/externalhandler where{
pop}{/externalhandler{2 copy{weblinkhandler}exec{/externalhack
externalhack not store 2 copy{weblinkhandler}exec{/externalhack
externalhack not store/oldstyle false store 2 copy{weblinkhandler}exec{
(WARNING: external refs disabled\012)print/externalhandler{pop pop}bind
store externalhandler}{pop pop}ifelse}{pop pop/externalhack externalhack
not store}ifelse}{pop pop/externalhandler{weblinkhandler pop}bind store}
ifelse}bind def}ifelse/pdfmnew{dup type/stringtype eq{externalhandler}{
exch dup rfch exch 3 -1 roll lookuptarget{mark 4 1 roll/Title 4 1 roll
aload pop exch pop/Page 3 1 roll/View exch[exch/FitH exch]5 -1 roll
aload pop/Rect 4 1 roll/Border 3 1 roll/Color exch/LNK gsave initmat
setmatrix pdfmark grestore}{pop pop}ifelse}ifelse}bind def/pdfmold{dup
type/stringtype eq{externalhandler}{exch dup rfch exch 3 -1 roll
lookuptarget{mark 4 1 roll/Title 4 1 roll aload pop exch pop/Page 3 1
roll/View exch[exch/FitH exch]5 -1 roll aload pop pop 0 3 getinterval
/Rect 3 1 roll/Border exch/LNK gsave initmat setmatrix pdfmark grestore}
{pop pop}ifelse}ifelse}bind def/pdfm where{pop}{/pdfm
/currentdistillerparams where{pop currentdistillerparams dup
/CoreDistVersion known{/CoreDistVersion get}{0}ifelse dup
braindeaddistill le{(WARNING: switching to old pdfm because version =)
print ==/pdfmold}{pop/pdfmnew}ifelse load}{/pdfmark where{pop{dup type
/stringtype eq{externalhandler}{2 copy mark 3 1 roll{pdfmnew}
stackstopped{2 copy mark 3 1 roll{pdfmold}stackstopped{
(WARNING: pdfm disabled\012)print/pdfm{pop pop}store}{
(WARNING: new pdfm failed, switching to old pdfm\012)print/pdfm/pdfmold
load store}ifelse}{/pdfm/pdfmnew load store}ifelse pop pop}ifelse}}{{
pop pop}}ifelse}ifelse bind def}ifelse end def

%%EndProcSet
%%BeginFont: CMMI6
%!PS-AdobeFont-1.0: CMMI6 003.002
%%Title: CMMI6
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI6.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI6 known{/CMMI6 findfont dup/UniqueID known{dup
/UniqueID get 5087381 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI6 def
/FontBBox {11 -250 1241 750 }readonly def
/UniqueID 5087381 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI6.) readonly def
/FullName (CMMI6) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 100 /d put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFB83E8A2A6085DA11
61B1632328B94B21D3CBF2E7752D441A2C9A03F6681FDAB37C4B67D5857720F7
0C4BCEE266586738012A2237A85FCD0425DA7E8E8632543F5BD5D50F9DBAAE69
9E053AECA6027559DE42F7291EB381D866F1293107553809861D43508C6F2341
5E4FCC431AF4A9B3660386AE63E877DCF5E513D0D5702B98D58B34897FEE163A
75CD6F5A2196F91CE5060CA5E72F9C5F79D18F242EEE58135BFAB02D5CA430B6
D1B9A376849751A45E52577B1810C4F0C7F6C8196071D5B08FDB731C5384CCBF
03B460347E0CAC959E4A12620B6C2ED62E06A241D1637F418B5599A7FF3C1390
7AF66A00F7C31B4EDF249C56C268EC9D546CD0489DA51B734C8292CE7B3D9E30
71448C85ACC64FA99B2DEA91AA4CBCBBB9DE20833700AF96395DEEDA3FEB7D6E
D6E3BE4A62CBFA18BD0471C14F3A2FD025C88E8166A9830C5B5B94624A3D6482
D1A1D83805D0EDAC1C79EA858A523D9FA3356DF42BC01886E77F6AA6B04E4E3F
AD107D861FC626F0A439BC3F125D48649E5101BF79C71507FDACACBBB4C4335B
C41A5C15ADF1DF69E1D68C3EB9BE30BDD5385F81D26EC8F2F206C1C7032B9EB7
0392BBCA23B4693686AF8D2E1ACB2FBEE81D75667CD1DDB906BC5B675660ABA4
E63429F16623F20B6A040E4942107CCA26CF6C1F52DEED9EC7EB15BE4F18F2E3
9ABDEEAAEA9AC41E9F20C37C54B33F609F5835AE5A1EC9D674DC50FAFF6D3511
2198195590F62B3B8A6FC8C3431BB8895A2F910F0361062DE32CDA9A7F41E761
B09BD8545CAA2D7124B5688B54705AA52E4716E36C0303FEAD38E0510B3CB496
6C30B115C37E02043D47B4ED796C671E30360800EC13F0F0FF3E0DBF5A642396
EB0F39A9DAF0974678EA1D041F08BD73867065DA91B044EF2AB15FAA6546031E
189936C1FD302BCFBE55EAF369DBA4895DD0996BF7292762551A86C8A3604E9A
8AD29E38BF6FD40172051EBE7C694249F3378ED0139D37EEA3ADB66F3A80A1D9
9C3655F054CACE93BA4AD42DC78A03F42455ED1BD5C122F234F21ACEB8FEFF9E
3BFE0DB2DA6D368478299ED63912A234ADB1DCCF1E519AD20772B71F8522B5DB
24E9658BDC1333D76F07F63D81F7A51D12C445ABF698092A24E5E5C36A52206C
0C41F7DCA529BB0A4D146DB6B4B341459FC17FFA357CA5F93DBCF30B61374613
4846D619423BCAC59B7EB40C14C70ABD985754A0094C98350D01FE9FA371B0F4
38884690DC7700C49236EF68BD6E806E8937AD8B77648F552C0C907007465A76
1475BDD3FBE1CF69C706E703226471C249A3448F81C240ADBE4B5474216D0235
6B0816BB6935A2704E851E20C002F85B653BB0700915B358DDC168ED3FAE3D91
8280A5CA5C2708D622B03DC47A70E5FFCAD5A7C8D9AD563857BBEF92A3BDB588
8B5B55CC9B960F20CA4AEB598DA8488004DEDBC9671488011E836D9D8B6251BF
256D08E6F1808E9D498449DF1F18E48B310D561D4DD3146C2BA64D960E66447F
6DA8B07194E3BFAF662C00737BB7222B55A5CC206A1C46F252ACF93D2063BABE
2BAB874C01AEC438D3F86AE37C9D7FCE4077F5B5785E12C1E0B685134CE2E8A2
2E4DCDDAED2D53D13014E428FAAE22447763D4693E82600F850CA4A49E1ADC5D
C8DFC16E97B9F6164095CF7F31373B591F815621F45DFF77BFBF89EF60C9F50F
0C2FBBA4EA9602E197B9447FAB6AB57B19B1C801DAB66BF7D263F6572B9EEF88
E06744C1FE197B8EAA71E1EB67716B7CAB30C859A2D1B2DB95ECED02B83FBA32
E62F97EE4403FADEC936CC8DAA161F7B509B2723BA2B735572A80D7D087E6395
6A9D34D5963E3C6E37F307C66D1CE551D2F055BFCC7360FBE93ACAFDE2B1A849
37FD373F62BB23C1A2E3DF61C9452A8C995B03D44D6210A968C6293B4A3BE662
C7B0B59E6EF6D53FD293B2C290436B0C448E7D15A63533DE321643E53C85EF8B
060C434E46A736EA617EA00D185323460E77B95C49070B035194A2E7693C3B15
104ED7F56FCADABE49F27F9A576B354C574B5BAFFFC57FE9AF02FBD87B8874A1
24C53826659BEB1EC50446AC26EF3A95877ED3D81D33A8BC1BF7473FB9C11ABA
0F27B38EEBDF77D3D3EA63AE6022DB0D4F1125DF274B86EF0A4A263E108D6044
7A885F5E87362293A53F457CBA6C911D23653DA7CE4BB7D4FF4481AB97C0DD81
C13515F0E3BF8A7E8DE2CE69B25BA9C185D9BF31A65DD290B0D4FDF40B61E2D9
AF92BC6468B3F5AB5D5B88710C489ACC69198D697055B39AB3DE8B3733825C5E
6E763E2698574381A01352A7042A36EA96D17DD2EEEAFF04ABF7BF7D877B0FC7
B6BA51BA994D431F472B6EC4B4C327399576470A1773BCBAC61CDBF0F95DA6A5
0BE5239B7E9CD39E1E4D27EF6695D1FB56D4CA2C2370509547D6D01273CBE6E0
66A696C35D2D0282CB8C85D7B1C51453A0AD0BC80E1D183D11AA78879643D9D9
A3D0B2BD8EE3EDF29483CC5871426232A20CB058EEBDAAED85378B163425C270
B0F7BB46B7D1B89CF84E6A06791195FB17F11F34A2548FE424DE10E376B39A2F
DD9B0BA2F2FDF3ED4AACBD0D60E67C0749D6DCBDE6E79041398DF3FC8D9B6CFC
693B870683CC425C52705902DFD324E157C9829F25B14A057AA92AFA17F156FB
0BA949698EAA0657B03D9538288D887959EF24A427EE7EDE47F304A1A6A715FA
2966273831B5B3A9C11021C153E67A73FA606FE3233C3DB217404C6AED6A4C59
DD4C2A98B31AF5604D8DE8354448B4CEC66022E756B0056CD32E9B002ADC712C
0545C2C16D9457E271D98A4ED7DDE01BBD1856F5C3DA28794D2C7951FE2FE6D9
18643CEEC41CA4A3464D3D3A102653CD6EAADA59CDD44918523B8811C2ECCABA
AC0D188F5E07B37AFD56006B10B32EDD179F4DA693EEBF4DF5425D996585F21C
8780A4D23D24FB0618C12DE65CAD42A0138E28A100257978EDCAD168C55C6F07
78A067F0299890356C2A184820A554FB07448395ECE36C45211757552E288ED3
7DFE46CB92EB2070442AFC85864A45000C4854D728096AD3D4C552EFC26DB6B9
C340358451B50AF9F1B35C2E32D495DE85B5848D78940270DEFC07A14D960730
878B5B55916FB40FD805116C9C2AC8C6D4645DA67A978F1C6FE705EC188DBF7B
FE7AD6769F2EEC4A9B05306D5BCD6EC3A240D6A29ED07D1D82E697DC8CC391AA
015DB6BCD1DA5C9A5A7BE3C5936681215E859E9837027D108A54F42AB24E38C2
4A7D8CF3264AE049D4B1AF48BBC564BCC88AF19D37DD81CCC431D0C554DF29A6
94ABDF8126EE4FE1DFB78559B9BF36FAFEC9791049C865694F9E2FFB7A308FEB
EF0195FAA6BFE7A081B65C5125623903828372F117EE17E588B2FA26DC9AE37D
9A6F0043C019624D3D87AFDB4B90C46AEA78919CEF5D7ACEE316F30EA0229742
55E02E0E2533CAD78CE9BD6E0260A695D776ABA229D89CF9BEA92CE0397821A8
830A557021B3B90CE0B07A4B34C24337FA3FA4A3728B6E013BA01071CA7FA667
6FFB4BA3A28B5D5614ACD4E80E00938C2589CC6CF885A260AF7589240BF8987B
20A19FDAC73FAEEDD93EBCB3D46F735214164AFAF1A7828FE96E2BF7CE1EA46E
FC1FC4527A0ADF2B81CA51E3D96F3E786511AF00FDDD9764CD3178362CF9DEE5
F05D100EC21A301F40FEFC3EF05AFEC140A9466AE68FCFD6CAC1A143BAF2B7BF
D0DF808F0CF87FE2399CD9D2DD424227CA7D4073ED002CD555FBE8057A797B60
313D18ECDD779FA7289D4E7BF82D95A7535CE3F0F4164AF239AC666653736654
C13E436B526EC5A1DC97E1D85C4EB563C7061AE1E81F0B38BC45B17C15FDB0DA
E5F6332721A925D4DD5A97BFF3E3F11D4F4F43BAE4E73A294D314527397F03CE
AFD12DDF9D07DAD8D6C8EFAFC2F52E20FBF62026810C0C31A1EF71FBD612654D
C68B7A24112F0ABDD20EFF3DADBE447AF9CE568F873ACE72B63283CB26B89BED
4B3315F26084453B1EB0877065A76E7B704B27F93DBEB365574A78E92FDB4B82
D6ED91A1728F571FC9CAB636A6E81D0C1C4F5E3F6F4574B6EED48BB61EFDDC80
1831E2AB9327B37881F0CA5D5265575F210BF4BCD8653B4193F74E3FF65028F9
2968B8127C68CA2919DDF529EC882EE99901146CA629A07B4DC59E7868DBE083
6E546C5769655EF6628FE2EA78AC891D130108192053D5056A7BD06C09592AF9
6310B3586A2609DB94CB0079550358F5547B9FBB2B77917A327EFE3F972C7263
54076627B4DD74638C3105FB25DA246484799D5326EE80503F18672B893289CB
1FFF8D3F662FB33E93025D86803551A8A1DE363D1534BFA3EF968871B19FB189
DAD841C177E2AC98B6B69A78048221C5EBBBB86511939D3A9963B3BF021185AB
0B26CA7D0A779DC2F7693C7E48286BD60EE46615E31B93FB0E6992AE20C792A4
72AD6FFAD6682D0F606807D7AE63A6280B5967FAB889DCDF0F76347CE302FAED
A59E1B1AB785D9D0ED695A0D05DD3DF0EF0B275AFCF9EC7031E1357E99A3DB85
B4D137567875F7580E2BEC96B08C97ECB40876000B610E0BFE81E7884C9BBAE6
6BE9C2C612475396BC10EC7FFBD1118A7971FE1971DFD0CB677ECA65DD837B5E
C7D36FE9F20A15A941F1E77C11093C902DF5B7639580B9C0E4AAD13518E1901C
1162FA095F301848770C6C618E371A0AC3463D0D94221EFCC0884B21300194B5
97E03BCD5C4878CEBF352EDD1D2173B56C9B6A08BF3F33419DF226E1633CC5CA
A88A57AA85E21657569916E9B4B79E51B5535A57B2D6FA3EED1D0AA32DC0165B
12F8F5A681040B456D8DF175AD6053A2954F327F4EB4CD453A056FB1701242C2
59755058640C62632C764E002CE928E6B908BB137C28630A3CDBC7C34CF2B643
FFAFF20E345A86F31756C78A8EE2B9B1C5DAB2C863B29A44190770FD90BC6AED
0C25942BBD6A370C21650947B49AC8EB6825BE65DEFAFDDA32007754DFE0273F
B995B8986E505F95E58A3F8873545DDA6F3FFAADE992F3FF7B2DAB76D663280E
CF2BA18BC8871A7C361AA3600B192948CB918FEB0F2900AF2BCF169576828325
449CBF0C7AEDC299FCBB061F491469B9ED1D56771A03F9F202550E17FDB15B51
4772B2F06E6AABA4027D13E8730999532DB2475630D2F8EB98242E36F5B45A94
2D8083014B63A806BB9A01906143482C614B5CFBE8C5354A3F2438B2160F6DC0
81AFCEB201EC67F66DC5808C907A3C6CB664F444D24095D9A11D4978A7B57037
87C67552FD59F5713D0FE03462F9A1A323BB3EFF0AAD61B1792CB109CA9AE4D4
D7F7FBD3FB91258DCFFB4634669FA13E03C0AF699165311CBF37D24378022787
87D1320ECF878F859149B2F994E700A32CB7253297AC58753E4583A08A1F83D5
CBFF10F2D26D71CDB20E1C69A666E9C4D23BB0E6BF1097FBBB204EB736E61FF0
C3FDE1986938F8099694B9F998B3C735770FF21F73B1A6B750498BFD21184F11
5E6AF0F1FBB08EAD436C4AADE1E6B815F5E58988C113B4B2335A340798BFB201
40586D0BCD6AF5A08CE9AA042910197F47D98CBB4411A6D435A46F46B3964F85
032D7F8D880732276A8FD24DA772F642F06C9F3EB4C9090AE4A3AAE67D8768A1
7B2A57E15B7FC626450372F40E3EE28D8D997CCC8CC89C644461D1110740407E
F6D884A0503E05AF830994AD0CEEA924D935749F6EE9F2DD65A58ECD59229918
A303C90E19E9C411FAF24AD5E9B786178F8182692CDD508A4755123B4A594AF1
A8E7287456C1CE2CA485CF4CF9DEE5238AA7328DA204816F98B7EF49EDB30875
3CF8C48E0465BFFA8F2A1CFB6A8F165B63CC80F54C669D02BFD9A0EA0FDE2B40
D69F0101AE4D2C10185AB10953019FE7D373BF40C2F6D4E36693F118866D1267
12BA7987ED4313E8635DA02A4FC1F7815105F8EDFE8004A8801CC1AFA8D123FD
1768A6C39E838BD489C6BEFFD3BDF650DF48D5F8D99DD5A2E8AD235F2CAE8BC9
C13AE9B214CF3FBFAC7BDFA54CB6E675273330608BD35600775FFB2A96FF648E
DF55A78B43CF54CABC0DA8D574CC5C5C62E9D658EC62035EA5028767749E48D5
658212BD39C7E76ED0C6F3E0A1D138A0DB8BE574987AF1E43070F1F12C560009
F48993FAC935EB56A5793BA13C28293601D268B4880F9BC33D553FF3B6A7900D
37900BD3B4B558C84BBAB09B4BC2B14D32E49596DA090E586E28D560903B9744
7D014EF2A6AC4F711A025DBBC841F1C1C93BA1F8327DFE33C803A0993050D590
C7AE262261DB7D04B9DD91F89927161A69E14BB2A48D29578410E312A4793101
B6CD65B298988AB798F45B76E1F58BE24DB207C7E07014E17525B436D41FDB28
D1072CBEB526E17C72DDA00ECDD06394940DEE8BD02CD3C81BFD12BE0568A459
0F53010A0655942C932905FEE87183CE357887E2ED286DC1E89F2F401CDDDFA9
B418F218D4115043892882C09F2E3749D4671E75AB1AD01C78F59FE3F54276D2
A91512C21C68180CCC0E147E834002D7799FF393842CE88BEA714672E1952C9F
7CEF2FD0115B0E292079909A7775769341A7888CE6063537ACFF225B4F396972
41BF46C599D278906F3BCFF81DF941BF5888DE8A53CB0A2D71610CDCDCC1760A
7844F89FCBB892AEA853CF5D967648995559EFE852C95D2EFDA2CF063500F88D
2C83B615618831267BD8F5438DC53C6433CE7347E9C55E103B450EBED6229219
20E979C00B0B9D86345FC3A8EA2B049B7E148A7AA1C859AFE93381DA74CA578F
8FAAB28175D5B57F6A74F9869B2F530009E953913C6925D0045CB2E817A17742
3C5B7574E9BF3BA7B769C161C2496EA2D346B4E19E434120FE92A0ED3F4A9ACC
A8BFE55F04D17DF035D01FC0B06182D8C27B6D32F36551B9AA56D61FB6A34254
D0DF918C6716D8D05B973C8BAD5AD52C06EF3C6503D4E0F7F791511C79AE74E4
4B707612149D583C5D96E534CB45F1E7CA5B23642B1BDBC881FD8E4F66CCEE96
7CC0509B5CFB0B3596682A81E682DAF6AE58F605FD7A1F414F62572298AD8491
B76D0A23B4AC731FB8E7682F506B5CC02F7029827FFD866EF4DBF56E07E7743A
D42CE65B38EBDEA193CE5B172E87DC88452C3DE192E363EB9DBEC4EC65F53002
BE9E94180F73B53CE1E8EE9333DC86DF5FB2561FA1F9B2511962CBEFACA739CC
38A286651CEFBF451FF6568CFFBA8AA68555181147C1CDBA18C4F5C77BA8548D
2B1BA37E05EAF7F69879C3ECBD02783028CB1A8649842EB71023F89CEB36CEEF
A9B04E9ECB0577536B88ECE7C1D81B0D6D5A478F8E92DF83D194759437088D7B
E93C6AFD0CC6D568E60E2F1265A6613F97A6C4068C8EEBA70F6CC4E88A80F65D
EA7B498395390A74BA57221B86611D3EE5DC4632F139CA8A15E5B9D2DC97088D
7CC65197CD93F4803BE4246394F40EDC2CB4904BC273C597F13C8DC680245A3F
F1AF2D7BCE5D69E9CFC81E5E9F46927C5F55C719AFDB2CB1AF2E4D55B0E3ACA8
6BBBCF253CCFF8F02B8542F296CED0EB8A06A88549DC959E22C3D6C48F310452
22B32C44B046A61A4F7F8AED613DCD3C464DB2280D56E517CFD16DC32C83EACC
D3E936D2F3A883B265444D818393E30EE3AA59E6FA73DDC421F5A0FC8442F89D
CCE98189ECADC080F1973E14012C2B87F6A8289D7E168092C539BD54D5D3FFCD
2B5E02399614BD5085D49ECD04E14FDB8686A39D6B3F7FAD25D751CA66148781
32296AFD919D83DF85BA4FCBD7FFAA1D831C8897E39819D72F271AB142F1C4B5
D94BB96F64B76C0C8A2D1481910C9571078DC7A4E23C0F133241F06609699988
7AD4D12DD860E2A8E037290EACAB5FC3D90C30A01449D0F3EB9358A8B1E1C2D6
AB92277FC241439926F02B1D5E36F4A5E94C0430A0400E3EDDCCE5BE60B3AEF9
BA97205FA0BAD80C3EDDB35945946E27DC9682816BFA4436B7C995E8353CA6CE
A532D8D57FF0B407C2AD1E917998E0394DA34FB91A4D0DDC48A5A864FD0F9471
93E02919AD6C9143CEAF479DE58330B0464489C0F01853B81FABA80ED0589969
89300C1C867B4F9111FE4B9B9AF0C6FBDE23F85D89E1DC3349A1940CC909E4E8
86331EEF1BB71DE6C22174ADAC5598777826DC3590B256FA6DFD2327DD0406D7
E0C913E73666BDFAF9E83165A14767EC7CCEF89E9F41AB694ECBD0B33B473283
501DD17F25A2F56F6FDFE68BDEC6A09E7791C065FC2A6843DE99B655C3378EBE
A5009A22338D557D2421F6EF22E39EC880FDB81D4FC3071E774407C01477C838
B99861C34CFCD4D1A61543D4B2228C5ED11B899D0BABB8890D19EE9332B20B35
C44BB461B1A39A5FAAB5180658A3DF4087A41B068DA5E22E7F35B7FD7FEF1C3A
308A13BC8857904596BABCD5A0CC3B27215BDF42521F9E02A64EFDA181546FA4
DDEFAAA8D34468D54CD1820B0E70FC4D84858A251B5BC285250512008D44A7A7
246F4C1753153374175E600FB4F8EB0232AC8D4F9CF8310D84706B9B4A74C42D
354C84F071E41542A9C41AEF3E374F4BF11156390F951A30920EF525E627A9BE
903BD2146202BCDA1F5FA4E32D871284AFEEDF308CA0CBA6DCACE189629C3DDE
9F3B04019CE0145EAE290C0694596EFA287584D797AAE57E9749B8793C4FCBF0
EB3E1EA173F22BC3BEAD1E8F33B2A80742A4C7864E03033381807E0B2DD10E3D
EA3FAA286B0CE22393A9F91646D641D0F24051A78EAFC6B15AEF03BAF9B1804E
2A97203B987EB1CC7C919BBBBD39B463E0BD4862039FE05AC8A7A84A9180BC4A
836550BD4DC259C2D04548CAFE227B22FC6F964CE38082C269C4C65D328B692A
E36B989445360DACC85202A8A93A35005173133C40F61047DE5A9684D9DB3076
D0A04F828169D11812D166A1EB1FD722824B75DED9554B2F1C6BAB0B96B2F41A
2C36018DDF91C5EB26689C101B73633BB020B92DD29BCD2A3CDDE4AC70F49CD9
FD7FBE0E2B5FD39980033C6778EE950113C13584489FAE192BA86CD7B9C070F9
AC4A19A2C7596933F9BF169D75B83C41BAEA6A850F49E8FD49FC9C8914C47C89
9EF2732A7CD1E76E78B163D8FFB08885A38A6E26D365CE7885D50B2DD9FA1CCE
204072F9CF896EE900AFD8CC2A2C0322E00B8FB9A82048613250D798FB41518C
E6614BCFE4FBE927039DCD586F0C3646DEEE8CC8DEB518E68B19D60ADB6F64CB
C394A554A71ACD0F2F22DE7F1908F94927BFD0A36925D8BD387F841B2AC205B5
2ECC206EADBA585ED57C2453D7449C50E958A419E91D92D0288D131426DA2C4B
E8AC07251DFC4C59A3F45BDA0047E1BB912DC9736DB4202366B7836276258756
232A5F253122690355B5DC12621A50D12DA3F04F1234A3BE30310A48E592D365
96A2ECD1211DEBD0DD26D84E97A316A16185346B9AAB4B9B3BA7E49E654E7539
0BAC4AD73DB25BE0B0503E73F1BE1946AE0CDF2484F90648594D372769B13E25
90236E810507D58A8335D97B202A8B40586DC2EAEF81F966609C14BB3F39063F
BC44D5141F0C508E8780E94A0389065EAF0FA5CCE893A6CDE5299FCB4399C45E
019510627CA2B172C02EB11E5F88902C2641A4187B75427A9052FE99E971D9D8
33A9D7CA5066495AA4296D5C64A2FA7C512528FBCCBCBC4C1111D97F025FD779
0BEB9CAD68FFB65CCFB63A68367A880ECD0031D10E13B5677D84551681E6916B
775C6D04FE8E577DC3C086BCDB4171FE846A337ACE149D53B3BFB9AA631F2E31
EB0DF52C57DF0D0A4D44AC9979E4995B823852D8F6B5DBCDFC170C6E39D5C709
E63EB87383C87A739B7EEDCB9D7261955092975DD05B1CECB9D714E9303B2540
BCF25F44396DEDF9758E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR9
%!PS-AdobeFont-1.0: CMR9 003.002
%%Title: CMR9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR9 known{/CMR9 findfont dup/UniqueID known{dup
/UniqueID get 5000792 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR9 def
/FontBBox {-39 -250 1036 750 }readonly def
/UniqueID 5000792 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR9.) readonly def
/FullName (CMR9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 48 /zero put
dup 49 /one put
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9AF72336CC4AD340
15A449513D5F74BFB9A68ABC471020464E3E6E33008238B123DEDE18557D712E
ED5223722892A4DAC477120B8C9F3FE3FD334EACD3E8AABDC3C967C61FF003B4
B10C56D6A490CE9594D57A2D431B9E5E10FE3D8832E227A7087611431ABCD029
85F4865E17E17F8CFBD2CADC97E0A8820E3ACEC873F31464466A9545E967E53C
DBDDB8478E69063FBB891566BAF88B7660A4405B16834761F041CCF7650AF955
F9E853AA9F5F4382E1FE7D0C5BB4023818A2383F91249D48CE021250EC9EEB1D
2835E18FB73026250B32A8849067D5E2258797C917F998F2D4121D96560C5FB5
B5D3471216639A8671B6DFAC5E3554EC36D9A72518525A795590C74DD70DA3A7
78BFC43E51D6F2BA52F17D4DD00D389D3983EC54912AFF73684A8A7E345537B7
E62361C04A47859DA084BC72EA53512DC54132EB2EE671793603015652EAFDE3
41C4B6B679BD60AEC5153EA0D2200CB1D097DAD770F5F31E6FC475A225995277
B867B731D5401E2D02B85BA85158C80FF7E2BBCC42B98AC867E67D25DB656072
55A0D32AB7AA483A5A9686CEA4E2B3031D90D84DB3E2DEE7706C91BA81CB8DAA
700E5F61E07D6998C9552C81B66FD10A10033D49EF3BCB0FF22ED0A3737523C9
8F851C61C4BF8A213BF6EC70C956AE48B5BD276CC0437C72BF6515B10739919A
F00F6ADD2798CB211668842349171A5AEB0664D2C44397E55A4A9EBDF54A3EF4
FBBCDAD9DAEF4B0CAEF7112FA828F2F8D9F633D37E5516AB5ECEA87342EF8DC4
3A50548490F5BC9A8A1F98AC7AEAD9D913BFA10CA86D73AEB5BACC1FEEFDCC15
B3655522CCA2C772E902FAB2A6FC153597D52763EB44AB7489FF061F7F58E8F2
AEAAF4D17F36CBFC00D3C653F335D14240C87DB4339DA9D30A5BD1F502BC9013
461B9DB2FBEEC01BB18990439A0E9CA6576BC9CF6B1A3DB9386C4A5D4AA6A5DC
CFA45FB75F22E10ECB72565DB441A194902C91427B4F676E531C661F7A2C3C85
CD534D1C89B6779B2EDC8E44667B992C20C70B663BFBF680A6CF4383EB7CA26C
4D1F06B5EF4025BBE65795F1EDB5CCB97050872D6C07BC2974F905ACDB7A765F
291365D6C8152153E7F017A25FB4476C60FD9EAF9A121633DBEAC32F62850223
D6418566AB350F90F4B35F19598478F76B63E347D4C61E203D4DB8ECB9889181
C387F4B663A502C638761D2782BB96EAC81A0108D7BD6938F67FEBB69218D115
D8E89CFABCE15C6ACC7FEB983332A51A6A73CF4E341574F366713D7FB29956D9
9BF238A87483D37E526A2EA2F101EDD34E34CB92730DCA7235AA0027189BE405
2DAB4AA021A30C28B26C50808E1E965C02F6212EC7C72F5683339425A7739380
A422E6191ED8453AF0CAAA424AE44DFA7CC5C2F6EAA8D73A5101D8E9517DBCFB
2858D0E8ECB7DC430EF23A9E4428CB7DED8D035D6050251AC101A2D0E884721E
2F21E573F948048BB8FF888911C508CC198BD750083B339500C426AFCD5634A6
AAAC1C7E91249667B231BBFC64B4317192FE07FE9DA0DDB5E517D097AAE46577
9555F29D45C67CDE9812CAD03F220B20519F2FF32DCA56A554D4296FE2D1F3FB
B209B5270E0E695EA5A0EF1144957CE045881AEB8D05D72CE57F4D34617AED67
0D3AF0472CD8D60933651626550366E300E72A9C89ACD475C2E2ED9BD44B472D
9DAFE943F8E02A6DC38E447EED964624C37C3130E48211CA279BB6A0BD59466B
42F3D89B5746F29E084E22CF58395AF0F29E55113F3A3F2F52CB3A6DF3D026D0
C81754B8E2E4A15F6943BE9D0087D5166060734FD07C4C57D7C7D90E8C9C1F35
623CEEE3ABAE75E1A18A1E3B50B7266BD2D8E812CFEB4A46B856885B185640D6
B9C22179551002B94282F57FB433B7FF157D2F0D240836B72AF4A331668AE5D4
E6B85415F4E8B9D2F9AF90FAFAA0A3866DF417CA5A31348CF9B41B8F5F4D2F97
CCF7ADE851B5E2E2F6E319AAF5792EBB9DA2C6AA8B73D889F3CDAA42932CDA7D
07A7E59183CD89520DDFC36E5D513BFD8AD0886046585F29B4D7F42CC0C27AA7
53915AB1167D292FE91957E94A57FEE2D49C20C9070ECD736BDEE0F046E60350
EA539DC298156A4E0D019E7D481FDDA6861E20678516AB80ABEC1F09B126BCB9
52E8272A06BB6DD87ACFC423B4A4FC9A3DC8DCAEBB807C5F748F1FF8B17B8B88
F426206BF1B7B7D239D26BC3CF0776C467A98CFBBCA5FB6145D5900137ED19DC
D002F10704AA680EC753C22E29AAB15712EF22AF73D80820A1EEE953463D4EA3
81FAF99518D4FD0F862A324FC44C4B9542A92C5B60CC983CC8F647CE5BDB4D6D
B92B380E0E5F7208A9CD91FA9A469548162C761C1BA05AC9D60B766764D821B6
B4E17F56CE455F06EA1EE2D38FE47581746C4C5FBA63AEE2B58E877D1A8FA83A
31C972D53B64E92EEEA147426A92CFBF76FC614119C6E9C6476FD6A069C803BF
E949FBE50B5AB1F1463F9747E8D353F7BBD991C4F90F920BC9407D8E24720293
846D052214E60390C3CB926D38C83AF697425D80C2B4FC4706615B905516B733
46ACA325CEA68FB21B2D17CF0B68BA4DF249368625CF83441EDBF2B86C957C1E
44CD722BD2537CE84FBA07EC7AE15C840041B9F7F3040072E6084CD55B301C08
A64A53BD4D3DC30DCAC6C152F316ABC59B8EE978793EBD568849DCC2A75A495A
BC83470D503F8E389F54B4A4A31624E83C601B43AC1E52CB811FAA7CA6B644A5
1AE0BFD4FC774C9C9DFC2769ABFA9C83F900BE2DD4010416053A1D4874E6ECF4
D86E44B4CAB15D53E5630C144B0C15B58DAAD785BA298B1893D1B09BA5D40344
6678FD2D17FF6674433C976D6DAC659175CED26139967C9B2B9CFFD78FC2570A
E5142141C2888DBF2DC8503F9137CE7CB21A1EBC2D65BF33FCEFBC85C9CB736E
24E8595CE934AB032CC70BD6A3B0F3BDBFBBE185512FDB7BE3D4A6620478453E
75D044BF770B44C9741E31985E6DAF5A318D7BED12B02A4BCFE60D25EF12843D
EFC9BAE2A3F2EFAD66D7858E83EB46BB09D2FF8AE9C43844A7001C86ED97AF51
C511E3A89A1BE349FF5215D1A57843EF51456B9838133846F19BE79AAA5C1AB0
5F400E5E8E7B0BF96EFCA3B8F0894BE589F2C9FB6C97BD16D38F0A237CD4F034
099C41F85C7E2C7BEC8E02C4F327306A53B4B48B26A8926670CEEF96F6DF2281
7C2DAD99EF8B81BBB777227C2475AE7400DC393D9C0445E925DB1E955950F7AE
53E9AC4306794239346A419F7B5DF4168382EF5956B81F83BD4BB7635B3BCC84
7D84D05AEDC02D14675D777CD19B08124001A4F4EA96990D96000C082A12F00F
7FEF793A7FA69D56D3A38D012168C5458B667190AFE80E02C816CAFF0A71953C
D80B085CD286027E2FDBB05452AA762FD7C813B2E19A79C74190E04E746C4933
CE1E300CAF5DD53B08110509BDA404EF07FA1BC5224BF1205DE8E0C3276A13DD
866675103B960C5F36644F96B4FAC16F5D6E91F74629B318FCCC8E8CB13EB76B
B0B7B90718D913A52A04732EA3667674994A325A7973C601A7DDD50F658E0826
ACB8E53D4914B0274AED98D7BC3B2B7F9D48A7ECC2F8ABEE05CF2C4F2B90360B
B7DF779EAF3E103D1D83EDBE32DDA873768D8C37DC10A5354A94B4153049AD64
FF3E0BB51AB91D7C0B4134D8731CD0270DAAF19BED9EAD800A14B65B68EEE89B
40DD624111670DDC7C030DEFE0D1B96420E249332445C155BA96231C88E70643
D526BDF3CA1E05FEE72CE2B881CFC01ED780C10E89F0828AD55FE29043BC56E8
2750A6DD15AADD54492F6092618F4CC6A31766B17FC60766D18C307EFC9BB787
39047DAD6B38419EFBA46B4E2C932F97451FE78AD75FA90DE409FC6DD46585D2
1941F5ED47A8FBAEF5A917A240959E8D9F9917DEA3247D9CAE6BF7A88DB4C4A4
F9F5A6DCE542420A032FF3392FE0F3357B51F884D6181583A554F75B1DF192E9
253CC828FF06B0D992D5316435980B044BB191508C7C45CD90F797F88856424B
14A5707459C50EDCF3E3D8D1667AAA83015405354CE744C66D9A5728F29E0085
6DBF740717FA0799E3BCC4ED7841588B496A5E549B953A7FD288B4A045DB611E
E3B2F35963FF18ACCB1C968BEEA2CBF52B3999AAF89A05320BB2E97F52CFE06B
9F10E3A79865A3059A957F97972D80ADF678A36E2B586C101FC6AFA4D137C13E
EE7102C9B8EF78CB057F8B7476F146E8FF5C897FD5503DD198128CFF7B5FB339
FAD0AF0EA967F77B07B367A4AC9F668F8BED99B98E87FAC750EE045602D76C3F
289FC9D97694C96AAC0AD1BD3FA94DF2CBCEA24B40F47B9B59E54EECEE7AC4C3
A3F5D19160E4C1EA830D57FBE10D8D46AC5CA0260F22FAA45236F0F542BEA9C5
5A88F878F68B36114E0573900C65E305462B22A3429A17C7A567694414DDDA46
5F30542B8FD4F00F6C295B2E8D3A986B953D96822DB2ECD48E8BB1763434E652
152EF3717F5E7FA10FF0B01D9F64E22C5DBD7254629658887BACEC0ABDE972EE
67299FB84A05B3EFE22B6976DB4CCA384232DDAE38C31623A4E39EA2E82C1EA3
BBB68F1A7DBF405DEC37CB7203A895C36A44BD2D63F45B3888AF91D37B510A59
3C921BB44DA620892AD87B665F69F6FA510B071ECC403CB2BE2F54B3969C9E88
713244BC97C1466DA8216DA7600C221E7E7EF5C789D2E12B36422023A03E11BF
2790FD6062FE6BF62F5010A92F0A104B76E255A0975E04F6F20F760881BDA7F5
D834D1D328B6EC19AA7D5E5678A84C74C82553DBE8BB5765E84F5A8789032143
6020940B4B8D45FC3433D356E28C25F42D0C19F911213D85951B2B00D01B77BB
A4C72E964F9D95422BEDE582A05CD52E03D28A996E6CC8FCD910CBAB728073F9
F9FAEED5470FFA55930447C5BA816F826F983D53EC9941EC8364B3060FD74C95
26D4F5CA753B574FD2FA4D1D333785241D8741B79E628BC852FDC35478C5ED9A
C1BE88C5EE7302816E65C12B58EA16FEDD4672EB3E24B6EDAD5DCE263BA8A970
350B651E5A9F3C281D85BC3F44EADD0D93402E36489BA5185E7D388974B0B700
70575188BB610CCA20F081E2CBDA13DCC6F72567962ADB342E02C1E763B673C5
F7384E24C6E1730A3A790D690A2103AEF88E0C1D4480DC9B25E5C8C9E1919C95
F83320179B4C7C4A26D559BFB24D7D596FB73758C9990C451E77FCDDD17763B8
9C30A9534E3CB6680D3D419D4B70B0B0A0D160FCCDE169714E373F65B7144CC2
DB9A44E041211E1517D3148E65A2486CBE5E74E625261CCF65392FB4F3091473
F9E8DF327D59A58558E5C9F7190DB577D5DC658F5E36258291C708B3D224653D
064BB6079F91293FC733710893AD1C96169B30CBFE4E9D52E7EFAE4AFEE68FEF
1AFD5E7E9DFCE8DE332B0FDC0514F9B3090AC85BBFB527FD8034DD33E9576325
A8769AE09AF1BA792447DDD932B98FC9486B39E0B04DDB3EFB7A30DA0940B33E
E27490E0E841E87B1C90E5248A91742ABEDC10F43A8AF0F9C5B4A4930B1AADAF
01874B9AC3B8D0DBECCDA6CD7E96471FAA15CB7F8A599C5746327CE392224C3C
40BD60AF97BCA6FF6FCAB2FEA114D7300B89E91C3BC92D5B3E2C83BB37992D8C
72F661EFD0AA034C738C019DFB79BF40651A1A34BC1EB9F5AAF58F8B3DA32645
24AFF8636486F08BC21533B5FF7391B0679A78DFDCB03DAF6BB7475A1D51DAC1
EE4BE9B986655D1FDB6936445EF99B58B303FE79F11275EEA96A9F6808EA8775
D873D1052FAC93769789C700F20EB2ED6D15676F6E563A769CA9298E463FC311
83281483B1C953370D196727A6A0E66D32D9480AB1B6DCA77868C1A2D5DB6483
5F31EB6B18EEFEF1CDC31533E69B0AFC6B30FC9912DC89BAAEEADC30BE14F448
1A6B70D36A5D9B01799BEEA686066114910842D022EB464A9A1E8F0A5628BA69
AA9A1925CCADD44703BC67A89F3B48E4680726DC4360274185CF3C8AB747A8FC
4B928AD62B092EFE48B01E33ED756DB696171FDB775396BBA138E056F71EDAE3
7A1E4CC272B8418114B0E81DE0BC43DB3C133167344488820A92DF10FFA26FB9
65FCA2C87D302E956DE6B4FE145145440C83DB43A68F8B29A592B127BDF49063
B7F11E155CD4CAE305525BEA56B7C412A6260426407BD892A3F2B444AC3421E6
FB6E6425EB5C3053C5644666B80405530FA0012B54557327C98E0F4F064099A6
4ACAAFC1870359C1B6FBE7606BB8A26026AE20C212210449905E628AF1B20490
8CE908B7EF3E3DB551C85AEB0F7FEB6A8D215B97998E5DD9C7CCFB2A9402B8B6
1770D4023777D4B45A73F471355353412C51D4CE71FAD1E0AFBD87B5F86307F3
10D0B94F1194EFFB64AD5DA54A4200490F609CA8B912E149F8217ABB1E9EBB3B
C4470E7365CF5E1E761AA1945044B225BD53D142F6588C50E0644740F7DD55E4
8F73201E5354A8BC78339211AFC4935F44701FBA043AAC4BA4698E9D7700029A
C79F992F62627C91EB855F64C4B251718FDA71EDAF082A0C7B00550949D617A0
7071FB14F05620CCF2180941341D8E60FC88823438FD728A4042AFA8B853107F
852F631518B61B234565291B5D5B89DA818DEE3AE3B68A2869DFA63255CC882C
3B16BBA08FCE3632E57FF7A07F857A1F0FDCADAB39D77960BD827CCC8661A997
648BF5BEBC0FD2286C2A112A8DEB9CCB6330A049170D5D68EEEEA011D3EF3EBD
855236B9380087CBBB6BE24191F728B7EAC5B50F7A547AA0989B7C7D3437DBCE
1669341264E290646F2C8C5A3ACAAC7CB63DC692FAAE13E9B40E8BD39FE16A0C
1660CE66872D061056C04DDDC265C024BEF8B7E3C3AEE76FE5C9702002C28BE0
B180295EE00E567FA2E5CD1638226D24A7C732E1BD8103B476EF5702768689C7
D4FCD47F2AB94A2B1FBAE6ABF87B09E7713C773FB65CA83F7318035B332B9F99
24A2C8897527021321D003AAD7C273E4BFA2710B9BB26C2CFD3D9A5D7ED1096C
552D50028AE2476FCD6D12A5D0A897521313ED1A3A8456A70C16EAA50A3E6733
6DC89FEC56AB54A579EF264377A103939D5EE00A90B4F2206D0023AF9491FBE0
800C6540FC945199E20E945F46CEEA2E885F6800B9DF042BCEF4291A4B1A62C8
6A7ACFF872B25FA3AE69E0093F3D0FF13A3313430C06F1AF94D500431566F659
E8C859A5F80F5BD2E85C8E32603D3745628E8FE6FBC50FA68F9C3811A2BEFEA4
5852CAE2AE5AAD3230ED050593BAD0A9581EB7B327C6916B8FC348F4C23E6FA2
00FA28AAACCB3091C1D83F7BB88672A53A2EA3B8C7C24374E400C57F0F01019F
E52D5C47F389D4C9AF126F4080F9AB8D1C8F470932BBECCEC72A9796F6E965A4
82057DDB43D68298A00880D4C2E2496F26F015FD83C5549215753459310339B7
6B2961EEEE74DA31FEC8E2BDDA42D4080A32372AC372524BDDA580EF6634ACE3
128C69D04D890DCA337212B109585C665AA83EFE47D5BABC2627A86EAD11BF7D
744176652C7F9497785A7A06A994ED8414BBE8B26E74D48CB83FA24AAFBDD507
84A90195EA3D77BCE8C2BEDDD1DC52E8164DF15D65B916EBDF3A8A76849653DF
AE3CAF9561AF3B705F75B9E5DFD6758DB65A2FD54683759912E0D0035CFBCD86
5C69F2669DF1364BC06848F7F903A729E2AF299C26DCD463822846F7E4679D57
E8E44C4064381314CE489528563694C82A96520B0032BDC94E9FA02B68F80792
19AA89F0EB25699B9028C7BBED09C7C8FE6B649E051F9042F32A004BE64C4DBE
FD7F9A354A8C3592B6B7C3BD820A744DB480B7F6AB52178878D13A29DC83DB55
0C5E529B7CE8CF84973F1A145089BFECE447527DAB02DEA5776B9164F20B0482
EBA48259A09CCC93049B07A8D04621A5D79653F40BD419BFD3A62D90B54AA85A
DF6C910893AEBAE2F768C8BA97725082994C0E258127C268D8A1760A8C9496BD
C74EB2D4049246C67BFE856C7B6FFA37A719E106CE1AD0214A7BBC94B3462D2B
B8D36ACD815982C8D4DE2CA0936105EF52CFE6785B93884F1905E7C10FF33F9B
2739ADBBB66334EB114170CE398828B3C6720E6318441B997B148C1C53D5BAC0
B89EEEB9E237806116C2F13B2FAC0B4212825FDC55728B798910FC45C20F16FC
121A47D2D5AC318FF64E7957FC51FA84B575E4BBAAA51CDEAF1463D14D87F765
33654889FADB02DF78EA2DC6338EB8B39F0D534A0BDAD971B7639A0F453F9CD9
F42831633DB3E5908AF653F8BC64C28221AF89CA3B2628C2353E88B786F9ACA8
ECA945687D9067E88B913AC12A4B78EA5F51EB716B751CD46EF698E1A5D1C82E
6AB4593DC6FE72335B22B02A5CA19A0F7749A937098152E076659A9D8DAF2486
2817E46E58F252CF7F653E1ABF087B8506BE0DAE74CE4855C52011B141932AF1
15EAE26212A073EC154B99B9550F7E536CF6AF5D18403DF576F7F463BFBA4238
1A7F6D64ECB957AD2049E3590E219E9B525AB522476DE37DC460C38F6A6EB944
BA509175E309995E4265CEFE18DA0823D19149332FB1C14682136A4DCF2AF784
E179137313161911FAF2A15133944913A00B898642B03617A6748182F4D3B1DE
6E018CBE29C3CF200A404CCD808C3F09577A395511EF944F9BEBFE923730FE95
1122BAD61F46FD9CF77EF07C44F6F407242F279CE5CD2A0E26B70B99FE0B0F56
A320B73EE025D6EC1DED62D2FCA990070DDB32BE18FF2ECC5F0D1EDBBA951317
9D5AE21A4DB6F7C88C1295045B3E84A57C8EBD35C4F2BA3CC49EDA7162FB62D0
C838CC1D55D3DCF1FF5FF5466914383877FF6411241EFD0E68AFCCA4D37A07A5
A021161D6E5EEEBF7DBB90419EFA4512B1EDDFCEA12C105B4FA05086F822015C
4A1B44C7A33CE98F54EDDD8852DADC1A0D561674CF416EC980FAED840A4E42C3
87BBAA1B630A30E71B368D7E72E9275AED5C23DC99C188F44145DCB4508D9769
33425D4FD29EE29D08B1EEF4F8E9786C19E075B92AA212C5A13608EFDE5E1FF4
0B42B8EE6328523F3D9CB5C9D6C62E01B7153F5BD68C86594481B16CA14C745E
3F4A3365AF924ADD332E9EA2214DC99AC2511AEB6F20FF2759
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI9
%!PS-AdobeFont-1.0: CMMI9 003.002
%%Title: CMMI9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI9 known{/CMMI9 findfont dup/UniqueID known{dup
/UniqueID get 5087384 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI9 def
/FontBBox {-29 -250 1075 750 }readonly def
/UniqueID 5087384 def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI9.) readonly def
/FullName (CMMI9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 65 /A put
dup 69 /E put
dup 71 /G put
dup 86 /V put
dup 100 /d put
dup 102 /f put
dup 108 /l put
dup 109 /m put
dup 111 /o put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBD07FC5A8862A8DB
7E2B90C16137614CDAFB584A32E50C0935109679E31306B8BDD29F1756946A67
7A7C2D9BA6FAB9B20A424AA0E6F4BA64C2801C2FB5A1156CBEED0ACB95F697B8
BC2A6E6AA7EB1F9FD8E3C9B1A16697EE1F0E7400421A7765AB218FC837A49365
82DC6B2C877A7DA84A81E6126EE96DB25C17A207D3020A045DCDAA064360DFFC
E3CD50E21ED239D2A6450D04F879A26443ADEB6A20ACC504989876476C7D1A74
91564FEA1F4CC2C8C8FDF666DB537F315AE1886C73CB5B00E67E7B398A6C018E
540EAEE98BB8136C4F044EDD63C33431D2CF9740F051DF365A4045D9D8782112
7BB5D494D9235BA98CF2F30CB119F5A904C32AD04C960C43FC1F5FD8DA7D90D8
93AFB59F3FF4F796481AE2A7548F948FECFC6C127C4D3F159B08F206AE8C296D
EE470DB2F879EA79475E029D22D7A8535C09A18689DB0609CC233E5199C02756
972CC9C94D9FCE264DEE5D75C8D651E4E2D1189AD9588CB815722BB5EE3C379A
6F31C2E6AE1AE4CCEB29766190AFA20EA937114978752189F1A9F42B39483149
796FCFA123BA9CCD1D9BE28289660BCAE16C40B5B504058D55CFCBFB4F4E3D94
DDBF39F157E63946534DA81C018B1C01B9F10DDB55E0A5C2B3985ED1977C039B
D6755EA42CD09E27751E159C30B93F376DBE61CD3AED34BA36A768F232EB3B80
E3E6B77C4A48D408217818E398B83D995AB6BC871F20991DF57313D6EB0C793D
0F28088EBDB7F38DAF7E01AAB3476EC24D7BB38A9889A7D3038D930FF4289B83
F54A7BE1E2D98A3822098D2E4D067A0D400C20C0B2B4BBD74C13ED1B827490F9
ECF48F8C3994C1C5AAC9CF783BFA4F307528F51EAB55F961808A42ED53F00C97
72A432EAEDCFCFB622389BDA707B6ACC9433B065CF29EBFE93AD14B8ECD5F47F
F073F11822C49B8BE924CDFA6348C3A75E9BB9BF3F31C41716B34794B28CDAC9
4DB8B087E180A9B3B17680F73D9C12C8D86A922C948093629F5D7F542ED882A1
692F4F6696865E53E3E2DD43B2D5E8C989CFAA5CA5C4C5999045E170BDE9921C
BACD6F2863F5553EAB2BA2D4A9034729EC0C4201DE90DA89B0A27C5A5C974109
4E37BFB3F46B3A506169FB0C68E1CAFC844419A8D261A1FD86A3BB78E33D5FB1
CFC687A5975987CE45155E5FDFAF0CC5FD5568CB1C26212F92E88255F0549F59
41B33125946DE43436BEC00804063FBF03EC796E3361B1C852EC3038D107F80A
9198968265D5488B26D7670B22C2D75EDFFD1B7B4AAFA36DFD94640C9D0E2D20
5BCA18683EFB91834A3939AB8EB60E2F09655BE003582634C52770DA9668C292
2E02929D812EE2B0CC65F020064AD5BDAC5F5693B30508F40ED8E20E87149BD5
8DD41AFF83FD1944804017DC5A04512E593549FFFAE501131CE2FDB65EFD0B8B
33809CBAEE411B3941C241550B9C30DD28088708F1C0CC3125CBEDCD985EAD28
03313741F67DB5744A87B381147D5BA70AE1145C27F794854628D87D6C1ECCA1
749E3465B950175D3C3F40E344297BD92D3190041A4392033A79BEAEAABB8DBE
CC14E39612F43721CFAE6F79074429221CA588AA2501DE520A464DE157A03AFE
3C082FAE7628FC0C57FFC61D0330AE6332D20FDBB09BF36848FE05E782D6379F
64F9C82C45402481B0A35989027F9756BF5A79DA2D96E10F39167ADB4305578F
90B509B6891338FA1D67DCFD61804AA6621526B2EE4769589A2646581712AC05
DA6E98D16494F07D612743058F54FEE516BD89A8EC3E03F9D7F905175D3412C8
F7329077FD6EB25213F3CAC94BA0C3363B759401B6EF7548C7D709F3241D030D
4EB46A1AE81863C412BDDAEA6084C37143A4C5E41BC646315B1CD09F934186CF
49D1D8239E363A435307030BD79536B50B723A39DD763DB539F24A10DDA12BD4
E467339D2D6DB177D6FC539FA77D2DE4118EBAC161E928749F7C753ADEF86117
58619F1155C563DF2E11ACA8347908B98113AED58FCD0394150EEC94B7F986EE
88BF7171D208D8F1774B1DD478F0C2958AE372D257E7EDF0F6B5D6059CC4D5D3
B00FCBD2E9CBE79235B9A5A3E943CC27AABB58728C95C7DBD4F4A1F8A4DA99AE
7377B0CC0BFBD454794398AE0D5F7281771FFE87B25A819F36E692286A42D776
01794A43CA9BB30FB8FFDAAF014F909A369E34C2F6C75B7D4EB9DB0580E33F46
19654443AFF8384B95600B86FF8E41FEFD032355626D60C7507C058EF832DF41
194B48A36F11082D1DCF4723E21401E0C7447AABFAB4639B26E3D2730E348F55
53EBFF39CDD03E06E2FA5FB379603C879EDB7E1A10F89695C9C47DEEE52BE0A3
F446F187AB9D7E93E6F9387F21129034F36DF40605D28FD526AF82CA9D232BE4
412567F06B38ECCD496EF40A7B243E46C9FEBA4F1BF4B1ECA029C5EC239353D6
C0B100BF7E7DB33BD1277DE104F15AA19F37340A777741AD1AD693BC76DA48CC
C6F83CD84591ECFEE375979972B0FAC4C10B625E4BFB261B9FFFA83C31DA0108
4FFB6377466E9739E0EB64424BD9FC7239C7DD834EC6788A0F97FE714AF92831
E1BA36A8A9E24739F1DC82DC26CC3CE28C210AA7C569B19E1784D663A0CA4E81
AFF43E86D6F5F63778847700072CEB77A4EB946DC1F23DBC00BCE773203F76DF
00F0B085F31420672974DDC642D885E95BA6BBE43E1CA8ABF464D9881CDECC7A
E98E31B9754C9B72A8BD5CF6D4D214DBC3BA7A0CDF6635953F5AC1E7639C4A91
C7AECE4C75CA3389C348F656FC2CC96C84C85A926237B6504DB51937C9CFCDAC
B75C31ED570D180757884E27757783DB2D5F35ECC48C496CDA342D49AA947BF8
2FDAD2F19DFE8CD1C76A8FA08F33681F3E12E229D7DAB45BE3A3F258B5ED4980
F15340CF20D965252843E026803E8AEE736EC41CCA82167401977AB719AA2F50
0B791EEAA82027B3C712D2EB9D14BF8F94FBDE2227609BCAC41EC08DE2BAC023
28352F913F7DF08D4E1C66E83F764578B22B4EB7191E852B91ADCCB1BCFDB1F4
E63DFD152E86FA9DE9BC8908130EFDE29CC4401339C05B5B9764CF8EFF14951A
C6C13AF979546996BF22F2B96D3D585B90CD27DADEC78914DA48432C6ACBDD42
20EF583FD41F2F6D6D10C3DF7DD077304B5940BB0462656E306CBD91EB9B756B
7014B1884A36201EC582FC9345C386043DD2818FC301EF78791C1D7854F8FACE
5DE9801DE9F59D5B4271E003AB897B2EF49501589D681D59CFFD9B03F722EEF4
74ABD29997515DA3591496B62666744EA76DCA45504F8075C0652D6779DBEAE4
90430C2945FBD60AD53B51DDBEFC7ED703C418B4B244C8FFA5A3C1B7600C5A55
3EBDB93C16AC191C3A28EB2279BD3F0D67C826BC6A73D3C0AD02262368AB4621
98A1605F2887BC5880E1AF2780330E0FD01D7CAACBB0F008A42C427F38236066
54799594E515B289044BAC4DADF8B3686B4372C5110201221FDA923F131E07E7
93C44BAD406838BA4D1C277EF74098B8C0EDC41EEDD58C195D7DFF5FEDBF96FC
19CEBC6C3006DD2CBF76916B4298BB915663C2F61AFD7747E03A03BD7280197A
9DA590E3D081C6F53DBF94E8D6FDDDD910A70AB18A0F6D48A590FFAB314D6CFD
E3FB20C1F3C91063F00726A2C13A3D48323F9854839405E5A29D66A43E6E2B84
A8B3765F1D817071D4D6FF42BC785C2D11AB2B9452F141696CE19C6AFB9777DB
107D6E22D8CC6C26440BC48248AD8805C4329D46BF433741CB519B21663392DA
5DC7FC9BF37E5BC396BFADD7263D09F6B4D69594AB386B7BDFCF3BACB97A0E08
22013E716E642592A20136CF9CFD61D4E515D80E06A4CB4FC9D9B916C93CEA95
B83B98C48CF36C1D02291D4F5C0419338D64E33C90C90EDD2BA3B96D70FAFE0D
403A060CFF448D3E28A9B1E3916018465E86095BAAB4706CF7ED350D7C554789
D7F4FE5F180767DE8739259E68CF142040BE1E2E8C6152DE3417C1FAEA7584B6
20781DC4A9796431EE713DAC4E713C839D7A4FDC8AB6BFEFFE767AFD8B67FDA6
943AD387E5D3BCB09039ADB64ECC2BE2620C6EC269E708DD06C311F450099E33
AF46AEC644222E7DC4DBB9371EE12CFBC4F9B27AB46AD1DA96CE006E1DF8291F
A550A93026CBFFC1087B134EC6EA76F5E109CDA58FF47338A0039A786A575F70
B8A03A4F9C8D07A4C856C77D9BCC8E3EAA740172D0C2D0A15BA35C9E5717D7FA
2691774DDE730BB9D7C70D7AE103DB8D35F3728470C76EBA0E670634E1A0BA84
2FA102BAD7271DF2680D86A4CA6FC353869987700E5E3FD778165456033D624F
E9B3E80EBF431ACC934AA0357E824B8AD73E222B510DE8445C55C07C8E5DE46D
E478F832BDDECAF2EBB11941DCF84CCD887043FAED9AA90D12BC8CA9A0C8D94F
8D3BF1F80B14B6CAE6BB1C6AA405AA64BB94D5A82CFEA548BA070796A02F9642
87326D066101435AB9EB40BA9EA9E61B363F5F5E3B924369796E8B78DE3414A4
2B79C6A13ECB2F34E6299658D07D2B3DEF3D4383CE009A927F0EF5C196652842
D96B857AB5E905201E7E8BA21A5EBED1FC6863BA9A1A6E5390407F75055E2EEC
512FBDB3E82CEA13663F1A1944DA072C765D8CED06AB461470C5723BDC1271D4
4D1D049D3EB131743F1EC9A6ADDAA038ACA2C41D139DC6A84EC3C61AC7F1E559
6155CC2F49171F6E07CF56D721D9728E87FC7DCBCAC46455A3694C765FE807E9
9CBC2D304AF37E0F28CCB22F239541B53A4D24D09C662559267467EA487BD33A
0BEFD4899B581D20582930703A868655C31BE935364CA6A95FBCB22CB714C040
9718824DFE97929D0482430726CCB5A5307957DD2432A9B6271E849148DEB76B
FAA290FF6D0B18DC5B76407852E81C105EC6CFAB0F620C6DC9DA555A33C167B1
430A8BC338BFC7D75B7099CC906AD923FA107C74D3FBB719D77A4E5A685FF9D8
56424EE4AA074434B809D894ED50F6A60A035C5223EA25DD8983B9B34210DABE
718D7B2BEB293FF1B63CFB1CBDAFC69552963D90F5E3FF533A3FDBB626E9FAA3
F3C119E5E01C7BFF832A033C3515BF049E29558B1DAD652F2888E339E67D15AE
95F9BD14E3253DFE9072B24C0E7E85025B71096AF51C86AECB2921126A43156B
EC812B32B1164BD9B2B947D503C015616DBF2024F5C8CB3236C1DCA653D661FE
6B1C19A22D272A176B7F1B7F9E67AF40DB0EFD4940E58B2A050249CA4E55CAF7
6ACFD84FB46FEF952D18552B3972D79D808B4C263B8C7E1BB647A2D03E102867
630D5C3F2C917F765A4F6FB8106BA6A9D0093E27A4CB6049C2371287D94B5111
6E7020776EBD744C6C920464BBBC0AC206033E8240017F8CCB112596ECD7CAFA
89950CF43FD87ACA750C03A778A37FBCE9C82C2F5ABB135BB02DA8E8C0D24475
3BEA9D79372D0022FF1ABD378C151417DBC69FE5C9CA38D23A3900E34BF924A2
90777ACDC37930B67DD44A2E76DDBD9B89598D5F626BFD325A978D277265DA47
38CFAF16E7FF1946E15F41CA73F7B4B02E5AE8FC4C37B115BC567E4EEEFEFC34
EC8974B1465AE57759EDDA28DD38A9210871D35D331AE1BE6097C3EC21C770C9
B25D040B2ECCC3AEB1EA1BF99E0C2C0F192C13BB9152CFCF75332E03F9CEC376
9B8C285A35F53655BE38713E09AE34BA2DA9C06FA42A6FD2D00CBF2AFD2BADB9
1571629C65DA38A431710CF5B01FCA68E8B8569922FBC3F9B64A5509B6F677AF
1B97E91FFFEB6308AB68AC58F9BA43DB5E764021E75B56170EB44C2C0A7DB86C
62B8982256D3621EBE3DB3994DBF5C5A14CF34B4AF3BD5697F8E3203085DE9D5
84B0598169760B925463E93DC87CE70AF4C2DF0F4287D2F2069847BCCF7A37A2
AD451D5ACE4DBCCB2E14D5DF38B226952E7446BF87BEC736EF3D5AE793304618
D66D3299AB9F9CA1D13F134FAEDF36750046E27706C7CBD8E0877BB6276E5196
BC2A355D109C0253644918E1CC11B717DE6FBDA201E769812752888CD66268F6
4ACF4A9449378F9F9923D584BA1B51F33663BE7A306887BC14A37E3C5A4654E6
531D6EB63DE3946BD8BA95CFB037991174F36D61D842071E6625605CAA350A24
FE551025D10871FE0E2599A63900C8520EF4911C53A03897C8BEE152451708E2
43FCF4E700C583A5E8DBCC03BF9CAB864DBD19E1760945DEA0EC0BA38BEA8256
D3A8D4F70F6685A99C6BD2BA8B412A26C002D76138CFCC7DF6802931E5D97BA6
0151F6A4C572235B4196B22B7B2D14B32886DF0D2CA8A277ABAAC53B63F64CE4
E4C088192AAB674497E8AF81961359C389B51F4A257373D907C615030BFBEF53
DBD99058FD06E352450B658478C10454AC8FC0232B70D5CB916981978053E358
99D322A07294748BA427FFD1E45C909171017B52B7C742FD77A8560852D819DD
8DD53211A14D7B2FD11E42941722FD3985D627FDAF87EB57326A0D290B5077D1
8A4230BEB40523A8565F95E0D44F036A571DB698EDD9D94FEC9512369E5E5E73
A3CA5C142617944F4F99C0697ED088ACAC007FCE06E5A6EDE7D0E03A3399DCE5
362271BC31533866BA79FD1FB3F608B22CCD4111FFB1BA35D920A23AD157C6B3
C3DAE11069D5E46DEDA7158C6478D8B8C0D9DC237CDF0CC6633911673C43FB79
E4F9B7F27495201E5ADE66255BC2CBE9D9F237DECB62A19D62CB41A1C92432D2
07F0629E913A71B3F1AAF8B8C5AC66D3C8605A48F8913E39C859E163DB1DBC8F
0ACFEE80A40B6172032E95A76B752B873FB4DF23CF3A655AF1A1B88C8DC156C6
190DE72973950565454C0A188A33395FD3D529A88F2B578356DE8EBBC12F04C4
5B899F667D9E6F3A4EC6DD8DE71FD4C2E2B6D56823EE4E0526679D71FF1B868D
F261489F06F97B010CCBE640E2F57BA3DC3332B329F7958394BA9777D833AB50
005E8E9232547104065ACE33396772B0E0BD66D2C6CC54DEDD071E444D8C95F8
6F88B31E20FDB80F77C83151B7E25BD3736B4F9BDC52EE78C41E9475E5A6D94C
D348AB42F5E36B4F167D29EBDFBD43B03F77EB296B06A36880FF17D412E77EA9
F2E7C25FD05E16BEC6732681EA21AC3FF6893B93FC09316A370CDDB86D9E6087
F6042C3F9ECD742778389170F5F041329782FB9F9702F7533E51F355F71825AE
2BF4F8FE50D413AC9A20C41B42537FDBE8DDC5A5C793D3760C1EE13716068752
F0AF10812250BEDFB4D7133FD58F4587BACD572505C84A7D3802D27443175FE0
0D89C3398B55176D8642AFBAB5CBCDFD6220C8488564B4306D74A58CD2921AAD
73CF803C754DAC2F30A5324886E273064FA51781D5BC596BFEDDCE3982EA1AA2
62CA7BAA1B16C6EBB99B2AAC4E6C9CEFB3D10F19987045C4918DB239E6E63D79
5F44B9D097118D081153AFF96E5EB39CBFBB99A3BE30909F614869031358EB98
F07A97EA78AE50375941B2474DB46AF3305F2B208D45921F93743A6CB8AC584F
6BEBE25ECAADD5A789EF60C9F54446687E7B030DA3E5243189F02BA46BFD28B7
DC14822E136AC7E40CE20458DDBF356488045C95907363864CD6943643BF0109
EE027A3091C11EA392EA91320EBFEA3B857370AD8EB86D73F035A476F7058222
E8CDE78CA1AA9EA69A8AA6EBFF3E67324C567B914134DE042D6F8F18A9373107
536E8D90189917D343F5299024239E2EC1D2D177D82DC8E344A7CF2AC71AEC18
36F139E7A4EB59A67192BCA9ED0EB25DE13032F6FEAFC3B1F4FC81BB0EDC41DF
B9EB92618667C59EA499B788CD26C2137D70F1B0AF793AF5AD0D0941F2E746E3
F5A7F0288BC1EE11E982EAAE763CA422D72FBBC0D754AD58FBF92629DC8866A0
431213513744DB48E52EFC89C83FEB082588E4F30D7DA77BB6B73B341E210300
540B806AE13385A75CCF183C6B0B93F43F08FF768437C97401626DF51355E05F
29A0952421D3942662A33818A5394ED87516E6663D35EF8EFFDA3B0CC3A35A4E
9E3E1AEB4F35298C62C1C12756A32613C9F5D2ECED7BC3B4CEEB021AD650AD9A
ACAFB0D7E91DEE2C339352CB79A00978EC1CCA87774832062303F7D3CD7B8049
79531C78ABA6D758ACCD689C47688531BE5ABD0DD5FD94AAB8C93FCC76BBC2EF
A50F6CA5499D5016D20E8AF33BFA58BED66C0FDABDD504A9062B0601E4667276
0B895C7FFB04F57CB616FCAE94DAD1D81B18F4626A90F607776976F03DFD5058
21A697FCAD148F1B61BFDD00FCB511133860B533E9819C58CD85FD51CA577690
5D022893211473924386479EB88968C4014166FBC5DC0C003A268D2C468D165F
2BF0E225046ACC0266EB53851C52AD8815FAEDA42A3EE1ACA13D74D88618BA76
AE1A4F735C5DC19198B23ACC0BB795FE89A2538F57D4568C4B1B5D578D3AF918
51F7D780DF1D6503BA0DAED61F656BA5BA46B37B3C89184B4B6AA6A5610E059B
716CFCF10001373BF88E49E67D76DF208DB3A7DCB10B881876F93E7CA1548B7B
5D8D083AD02E1D79031A18EA3A131D5A13ABED32567779D31DDC32DCDFB357F3
EA207B8081AE9FA4C34EC52D9982C8B1DB244224E8CD3F226825D3AD06CBA6D6
49DB922805B5720572F0EB7CD084210426D8D2A2FD0365D29BBAE1CF9399660A
E744B5B41BA1C7CC8DB4448D9EB87ED161F5A737E3845EECA29E41381BA0909A
6CC646088D87E783CC6435ADD78B497891C6C96C41267E246C264CD0442731FD
326689FF72C4E1D3B688AF58607D7B80B2D757066080E9C10A7582F66278FABF
98980B732DDA57C7CA288D5C8FB4D6451F8DB62670687788BE2E199B253B2647
7BBE28C58F592615E8A9F8FE27718821A9E6B675DE90BF736D711115DD37E540
676EC9AB3BDD60C5929B482A2D9E1C8ADF0ABDADE23E853B922846FEF4DE5673
730AA8104E2186AC3936DB1B56B22E195EDA4E93902DEFB9F4DC14CD3ADA5573
DEAFA0313696DCCE603415CE81C1D3FFE3D95A821EC34B2A32D064177764CA90
BC9B1D159514A45ACF120AF46A0E9CA9F0BD3C07207CEA8564D5F73A77935EB5
83A05AFFDA54AE568A93566CA33DEC8440166BC3847F006F301C5195DC1CD226
592C7F79484A5629B8286AC716E73CDD2C251658214385448A0C8B533A576820
A29CB2C48837048512D76B6EE7E7E2D6EAED17A891175C44FB530883AD0DA274
88CB0EF0D8870E38FCB8FD8C2DE7E587EBC1902B7A55AD7346F972C1C00A69D7
70C6CA0E784D012180117FC9BC9E9AF8EDDBD3F45DCA22EC84021EA6A94CCFE7
268C99B37A155D453D6428BC788D21128100271D80FCD1BAADE1D48142DF2F80
D7DF8254C7934AFF0F180FABDA1FC70BBFEDF294DB44E44B6560925228CFC224
DB323DAB48E1D844BEB1FD631BB8C1036D6C3C91B6239685913D15B40AB67556
25C9EA58170E8038154A9D727E20EF53ADBB6FC38F8C6A39E1DF676BA485360E
0748C100FDBBCBF81C12F1685534CD9DD118BF6698F9E22CF6C18BBB0616520D
787FB5DA0FEA0FBBB7A753C4CF19E3B01CF878DBFF15C19E9D306694D2084E92
0EA51B69AA4E387B528A7B01795A140EDFD9E5C31201F240B5ABA04A46F7DE4C
E6052BFB58B6603E33CDC15637B054153B4E45F6B497BA8FAF1343013B9AE3C4
3FEBBCE6AE42187576BD4468FED7F3BCBFD1C47979146741CB0DF35A2A5341FC
9CDE859B7BEDBEBE7FD891F9738CF2A83E52E448901F274E3E87E2CBBC8883CC
92966A2429F0716F855C6F5E3844A6BF981C39352B4A5C06B3CE7DC84FB0287A
492B3C338A7DF8DB449188A22AF0F035FFA9F663D1529E92A68FEBD32F956DFD
A5AA1178FB7CC4670E9132BDBEC8F8F164B6B721A18AE221E75F843D47EC91A7
1272D4B7717CD5B9BA210E5D2B4CC6D63A4F33850AAE4FDB46F35D3B48B924EB
A5382AD4590753F14AC3FB4FBD6D59061968EABFD2F32AE5896CBA3D0199571F
F537FAC3E36FA9D263DF16B6FD9A8D566DB97CB8CCC7C171C98117BA259A5D93
09A9F41153A0A084C3D3CCA916519FC91F6E76043A6DD0F80F331BC1A35E7A3B
C4520DB7E7AF69F0E92A5B89F2F76D5FD7DB8499CFDF01D63CB9782DC97752EF
349478678EE2F1802D43B5361EBCDB78C71EAAEB4EA13A967E8109CE50F5AE86
D6B4D6849834D31BCE76A15360F91F7012E5CF99480E13636857B74D8268BEDE
D0F13F4C8E52C7A9C031D556C7D293A2C92057652EA621B2E5997EDFC35D060B
65C713791E360C5759B86241D203B17E009639953FB1B9F511B7A2E4F264A140
0959E6F87FCABAA01DA8E06AEA72EE382F69973BBC9FBB4E205E9FFABAE2C640
6D00183B1DDDC15DF1D8B737D13E1AB9B019F9442B342882AB4404F2518135A7
6AC2D35C29F5C3233F1AAC8C7642DA07EF8CCEB4F99B70053EACBA51E7DE31CB
DA1CB23116A68D2885330F9E9B42921A2CD7E124F93A3F01DCCE75156A510E0A
7EB355F64E361BCD8A8CDE956A482C7E016B520534B7C4F105C2E4787F5E6353
F2C2CF9CBD001F095FBCB3EBE7E1A1FF9F9CBC0C5D89E762E0ED36512D84544D
BEAE4283F90AE736AE1F16B7CADC692C40199C4C4C9DE788D482086A98BFF89D
9D9EB593F29DAEFF284A93E6ED9C13E0E1AF638336015B7D7BD4C29B0C054E84
405C75C67AE00D071C5CF505E00C562A0241894E17621EA053EE1274171D2F4B
3856FF3669B14AA0F14188148CB6478936935575498A371F7623679CB7772BE9
DC7D8C53B10D8251F58171FAAE0457D81F798361708F4E5565C395E7ACD4804A
5377FF79DFD62DA5B4DE3EC0CC3F81D5656E20E4A91CACC2505A4C636870CE7E
0B18F422FE20D669E65AD7D48E92BDCD7A32DB5423E5B57C204E8B3CDCB285BB
6D2C45ECCE6C07BAEBF2515CF1AB732D26D99F2CC85FFD83DC3DF722A237327B
DAEBABF3D516CB1D257F4BAC92A4BE0895B3F4A84D9EDE30DC6FC4A50B0622BD
AACBDD3886A875B45124439972E077DC77EC0EC3543E5B065D2A4209E5C219C0
9B2231E3424E9F4B38E9759D588864A3A522DB1EC2046954AC4678C3015EBF71
B3988A96E113E5CB096450007F40BF27DE4ED6A48C2DB01A721EB8B6417E8467
B7CE9021639E3AA1BC45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSY9
%!PS-AdobeFont-1.0: CMSY9 003.002
%%Title: CMSY9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY9 known{/CMSY9 findfont dup/UniqueID known{dup
/UniqueID get 5096650 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY9 def
/FontBBox {-29 -958 1146 777 }readonly def
/UniqueID 5096650 def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY9.) readonly def
/FullName (CMSY9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 3 /asteriskmath put
dup 50 /element put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A580F0834F28818EBF
F29D3B2C7C9AFD969BA6D3B7429E222AF78F6DE00CE2C8008A5966422936DC5A
DE549B458EB41026E123FE75E703E046F665B7DC78298A145548DEF8D579E008
39279A5208EAF898A357DF3FD9CE4450811F20B454D86B2947BEBB11EABFC62B
187B12458E022CDBAA6EDF4A89D79300F635D8CD973E35FA8D9B1240B3D30D72
4F30444BDF0B51ABA15A181A3196A6CDF9CD1D38D64C83E745A767446641991E
23EAE067609DC2E84B44D923CC98407812813D5AEF0EA21E560B31BD77D735BD
E35EAA564A570DD3294C703E16BB9F251D54407269C8B23DEAD063018D6EB748
4204A415AAC8384025FA922E7074FA7B8A6C31FD3761E7B2737D4D9C9992B7B6
DBD0CFDBD87D42E1A451FC5C7EFAAEC65D10D278470DDF42DFABC836CF15D042
6900E0DCDD36E7153BA186B8358E74F91A1D43D62EB0B821C0E97FE63F1586D0
98F01E8F6B6F2A435343A25CDD80D3AEB42DC8E5AE02F8837B84EE5EB508B02B
6980D2349984FE1A0D3ED12355D556BA483CA078B7921FB336EDAFC22AE05C1C
5614F5025B890009272DA8C838B81913C872A54F7E932237FB1BC2CE5D64CD04
2D320C8E2E610E9EE36EAC7C28C833F8A14048E751B61D0CEB342CBAAB34D104
311B421B8CE4D903D2E2518BA8B734E2637E2CA55426C4A87EEBCE637F8D71F1
54626C52083262A5A9A3B49142948BC1AC0B7698811AE81FC3D3B1C14E6C274E
CFD6C480514F3649D7725A0A14C82C9D537B1C5A9ADC816340B8B4E484AF55AA
905EA936A83FE2BE788D084469008F407447E0077417096333F163CE94CD3098
4B9712EE23120829AE2695EA63975492DB2615214B11C87ED0ADB776ED4BA0B1
40D09D1A617D4F57EE1A9B05C8D5F42AECB9C6AE67757DE6307B1A9C467123DA
773239976AB0EA052B23F263031ACABEC9EEC7A43ACD0DC2D7AD66664FB0D937
6A0F463A173E8B90B2596DD323D2350435D9D31B638112D70492F44769FC0C6B
40A291FE78AA598CAFC19E5AD195BE7264F0EC29305D36C7AB8F2A733797D75D
94C8F7AAFC49C13C108F514745A394F460294C6F3F44162BBFA878F773A5115F
062E934253B786DA2B9A6E8E843E06B97075BE99F21B330D6684998C5C340B72
09D69B655097354CB682D42120ABF5109E5522ABEC94D05E7211DACE8737A1A9
0BD3EC16F48798E67C7C85560D79366504BBFE5F7F5EC1B05B9F68F98149A02E
E53F321C213456D802C01871E9024F965258F71215F40EA71057C15E349F06A3
A016BF1B7E44DC4766FC92EE500EBF7C47D36B1EA34981EE6FE38FF4903466A8
C9020B91CFC731642003AAEB145EC0F13D6281B0838BB4236C220F6F467F7DCB
C79BB9CD5B6A180DD2ED7F94DA6B5CB833E62E898BE832DF601BFBC8148F9430
C8AC459F23EA2536E301C9DFD3FFBAF4D01E7853B60A69B5D012DCC0054C0BA2
1293D3B4EEDF7C5C78118138544A60FB1A500F72BA39E63EF5D97D68369850E6
9B6336DA577128DE68FEB71877360D97204B5F3C06E808BF95AA6D6013524BCC
85CBA9FD2CFEF383645E7E960E7AD471A6A3B8B8C3A0A0B8464836499309D82F
52004FCDB68997BAD9E4B5B881634FE1213283B6B19308BB67F2364F7ECD5534
467EF07CBE71989FFCBC6224417C0710EB3EF2676B9DE846E7FFB1AA6608EC9A
76C31724A19ABB2AD08CC102F5DE8E4E513F90A53F06D440A66B000CCAF6AD12
6F4B161B56FA5FAED65A24FA183B84F4B45407AA69624068EE0E3E47BBE973CA
C72137823F1D676131C8CD5070092CD73FC2A93E0480310E21CFB14C031206AB
411694AFE7B639ACF35C28705A115E98BC69C66F6C58E9E79902453798D76267
29B780AFB6B895B34CBEA51530E8300569EE4D500527BA294282FED81F730A46
6ED19AA5AD45852739882216EE937FC45D75116BBDBA6FF4B4423B398E383CCD
A7D705B8BA85076133E823300C3EFC9EB9399575F5F6BBF868265304B299AD77
B6B4EEA04C83E163E8CE2BFACA65F9DAAE3AD2B0F8DA1F986E6A12DDB2AFACD2
217E37B093F46FF3E20E587A9490401C2833F5844763FE2C528E151214E8CA95
018E1D8D47C9EB5FB4F0EA2A6D064680DEFD2C5489298F83B58EA7FA8CB019E0
671028C59C3E007DD86CD247889ECFA6AD6DA2433B02180DCE6ECF9E495D0976
D063A61B007233DED5E3F351D790F26D4011582735A69F37E7CCBB0AF254B925
B378522B748BD9BF152E2187DEA12BB168C42AD8D67D18567393B35DB2AD8403
5A7093EB59FC276525B8796FE81944F7F03349BB077110E182A61754ADECECD8
A5255DBADB523F3DC251A7D97F17DC76281CC632FAEB382A972D60A15FDDA57E
2F42AA338D889B47F6A3C1FADAFA8D11D63EF8D0C8C0FCE61FBD8AD34EB8DB3B
722BD86CE5B1268F704ACE82A39466DC2D96C9849B9422567FA5E728B17FAF61
59A77E9B3289DB807DF54D076139E3DFE176C3131FA4540C1542AE5AD6200FCD
B92D5DAA77DD4D3022049B6EA2A037FE96E0CEBB1608C663F1373246FA74D70A
BAE7BD37F3AC23E003204FA8270B4514DE1FDC5401B69CBC98A67A5CAB5505F2
87C242B6ECC86E88EEF44B9C79DA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479
E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF9
2AA56D029357AAE016582592972ED01C0ADE565E87607F17BCF4983E3321F606
ED664B9516D404B277C2C1B0F873D469D64A9744D9C1897125FD471E71BE060B
A3A617DC8D812E184664BD83EC74EEB5197611380F2D859E1A61A14404493D04
B5537C04541E557CB5039905F37E72B762EBD2321633E12C38C409338AD5AAD3
1A507BB2B8F5235F0614D0CEC2BE44CAD504C9B2CD3E45437A493A33B9BF8A1C
3FE66B1E673449A54E8E3C3470688E94EE4404C888583F7C96B43A592D586D25
8AC1F206EE5FBF3AFF7EDF9BA91EEC6BABD573D455E0AD6802E7E23A662D4F12
FDDA00EA054CD331DF86C099C4BE8AB4EAF5D8EC1BFEFCF50302BE61E6FF26D8
1E88C544570E8D6F7D875466C70AA91D6CCD4DF4BBA34FC67191D1692D3FB76A
66F114152956A5E38345E7495BEB1A389B7D0A59624ABA784F77C1BF7728E556
F9D97D71858D61624C22C6914A3A995BD75922A2C37EF2CA91F923A4561CD3D5
2DCEACD9C3A65A9FAFFFA4822E79D6D89D6366DA6362DB16FF061840582DA35D
E4EE8308040C2DA5F298944EED470D6E4E1FF58DFDDA96C20C85E2DF2652E12B
2EFB8F890D301E8CE777678FA786E552A62A60DFC369AF4BDC069F5457FC86F5
1FB1A38A2222EEE86FE1AC9A8227663AE33217C1F381115CCD04D2F381A27E97
36D356DC64615AD63E1952B37AD4F967317D76A6DEF039CE8446AA634086BFB7
7B0B34F595B61ACEB346F51ED10ADDB7B852B5B2BCFE416D0435A7CAA4C9D9A6
152D9AD938F39E9756AC752F1604D884992BAD768C720C45479F5AD8E53A4832
1B44D6109DE4460A662DA6081465E2BE02ACBEB52259E046767DA24E1416FF44
D5AA1D303CC4249510D703CC6CD0FD7DDB078A91089FD86ACE1721F875F019B9
82D7C5B2530567F2306F47DE90EADDCD12AA1C693B1982827DC36A74C86474B7
0A8A2E084CA403AF654E2F8488806B943E38ABF544ECD45FECDC441DD970B180
FF3FFF1A50D5E22216B240A527F95DA1E43770A3867F225DD2A8AF01A965E06E
A063997C4CDC0B16B52F9B9C8B0DBA94F88F26A7A01E596DCF8F33DA3DA5B02D
2ACF771F25A1372F521A80B93DB0337886FCAC0A2E8FAE0D7E1E0C31EB43AE3D
B4C2020F322A9857A9EADFA7782CA70DE7421B9A83DE1873EED8D096701370B7
7EC33B9C104E9CC16DF8C80ED24D1F91677E355DF037621ABBB75E09ACDBEB82
30F1AFB82FAEC4D9E2DA93303F72C1078679EDDA35ABF2AB38DFF091AEB273CC
5A7B29C0164977160CA75F62BC20474C7C1F127AE7E4DE865FBCEF852698AB80
B61340CAB6F86017FEF570104E46B6FB3320E78D387CC58DF1C4FAD8570C0126
B6F54AB5BCD47904A9255366AC9C88576456D3CF605822269CC65979EC3CC740
AE3D09257BA3AC7A364A7F5EECA3E658AA20B53423553C416D98FD8100D80A30
A1B19F029B7473070D7C60CDE51BBEEFD2B45B1C82F4FE32A5BB6BB5BC32BBB8
F600ABE893B83B806A5435AE2B40E5CEA9068C6ABBCE73C9B3533520439F28F5
E171DB1DD90B2EC04A1F36767B2B97D4EC0FBF217D4E80ADA5383BADCD7E066F
5F4B23738A14F19AC7D765119AAC9AB6CD0A8AD4EAF8955CB9F5BDB0156CACFF
236D24E8A12AEBA549FAA9D7053D10AB7094B5D9B86FC7375E245EA8D7FC64B9
859A1A37C006E0449AA8DB8B89730348C71C7E014A2EF8D871AAA856407C33C9
392720173DA60850938D0537564455C3957631AC8F8C0B3B29BF6163828796E6
0944C3000B990715188203B32BC4E3FCDF173A4A9C78753AB7D76BB9A4C2DA4E
3EC638753D6FF6356EBB07D0A9E8D3F50EA5451FB6C836B9E5EBB8F1331C8CA0
B0CD271AF316502CBE87F652B5ACCD43176AAA32C6530C69E77E3C85DA496F3C
06980ACA739DECB5D986622AD81F204579218660EA791774C2D11878DE23F858
BBC4ABC7EBA01B7FEBB32BC914FEA8E5720731FD43F8A5CC53954D13455827EE
9C7BADAE8322E77EE7413D6C86E6D378FF8044F50F529E765A1CAC29E8B1D91E
CD40F70F2D4890E0FD04502933212D5AB176DB143831958605C1667B8841E770
CB4D513DF0C3182C23CA653A7A714B2A8DE29D6B203F5A9481E0CF3FF073FC6F
476B0B205136DA43650A940035A970584DD7D06B7CDA8E960186158B75FE3917
9B1D0FFE45EE1606C875DF635B80F5A9E5B67A6ED748F52A53A710A45AC20BCF
FC96755E685A3B0712D5E09D860986C61C631A8D2A505C57D57C1D4AE78C552C
DC5C9EE15B82A4C3020331B78FDEFDE53974C391F375E8118EB7B2D23DFA3F15
389043EB6F33842C82B896073760197B13D3DAC172D77779DF517AE31BAC43BF
5BD6F75B59AAA59C7EB81B776FADB720282DC06BBC9C33AF5AC0BC59F6A0044E
3898A4B5868EF32BC4F980DD863E8EDF6DE3E753A7B3E39F8E8BCB3D3BF14EDE
3395E73BD07440FCE88FB28A96878E823C1E5519650F2054EC2CF733EB8AEB0D
510E5659A3179C3FA8E31EED621BE0EA648D76C370C3CBD8043BE206F28699D7
5871DA483AA5D3580CD55902C85DB9EF5CF5D3191738FE64DB42410F5AB8ACFC
CE07E524BECA5633B082F4793002A4A7215AD1BA31159A30D72AC60EDD0B2BAF
73C9934C85C5372B47BCD3ECEE463CADC05CE8352EC1399ABE2465AA53E5965E
79400336B1F5D1401EE2DA5807F9701D1086DE505F6AD4E64DD4F3E5E90CD64D
FDD25E6FA03B679597CFB8C5C1F03641CEB7B9B40787E70BC6B063621382E3D5
1287365426E44A2EA208C26155CDF782F404CA7B3C6D379103EF4A51CA3F1343
22B04A0B55CE5A7633175838B9E50480E9B80446CD3B541362E7A10BB3C58A42
88C0FF580B4A0296073F5B6505E4FCCA5D4BA2F7E8D59BB04EC9ED4E664BC2BB
8754777594DB26DA0985663D321CCD13FB261BE8A771470DDDA783493E452A87
D0AD01AFF8EDCB7BB159F1408FBCC52F126C46234CE6BEF241B49472102598D6
91FF2DCBA2CD0E6658A61DB3591EA02E4DF202954B655C5A3C34B14CB60CF9C9
2A6683AB282DFD79B33FF3A6AA524582F174F11A5568159083496B242ACD2770
0ACE8473D363AC11250E5DCDCD3CB2281B71FCEB8AAC1367D0714796AF3BF01E
80BD4B05A0A45E6CFA6C672850B9DF113F5EB15923ED885A0E4488D4914B62A2
FAFB6A63F8AF0CF0DA498E1BA68C4150B6E59CBA80BD17026FA09920006D2075
BC6F1010D0A10648A20D8ABF8137BFCD6A5DB3606F6B3CA51E8A4645D32E5966
6DFF7537F65DA4268A86BCA5791C21F5FA9F4C2F1F6C1AFC4D4BADFA63609C4F
5F5158608E6FFD9C5BF00646C3AAB983DDA5E37A9C2EA81796B161A06201FB6F
8EACE87008EE7A008BFBA69AAC04D73A8C0447FADA0249D8861ED405537E23E7
BE68C4349FD64A14E3A53D6C6484E704BE4AD5FA0269F56D3B752A070D9872FD
A5CEE543B413F13CC4CFABCE885BA4533EA0969FDADC14DE6846B330552CFD60
A75BC8C9DDA76102E48DB6B81975A1F3FBE182CEF410841CC6164AFA0CE51FD6
8E8E6F0971277052E21126909B5EE51508306B886E945C11DFFE1C91BD0D79E4
554CC7D6A774C9B98610A1E49C3326D62F157CA9D89B56699F32DBB9D49C716D
CBDEC052133F8E18E8F3D7A59008398AF3E4E1192CFFE4D0B7D2ECC8DE2ABC1D
4DF7F2EA5EC0DD756CB2FF9F95FF10E506463D3037BABD221C08506FA603DE1C
DC45A5998921C4023E501DBA494C1F41C0955A761AC3D5B13A88EC4F0BF40756
BAE8645EA76027B8AF74726521DC129B9AED4BAE67A511EA56EE9D0D8D30C7F6
FA8BB890375A263A0BC4E9CBBBB8F8F8613A43B10E964F8CBD6BAA2B0BAA70C4
4CFAF6EBF4882B610AE13689823D37B046FD26DA85BD96B896CBDAB6662573D0
2CB87D45A86A016146513441BF7A748F1E9C2AC7172460EA628BFB22F9797905
F6DF6749F13C7F234A2CE4829D41E0F53EF3C5F52165297AAC4B5AF4747A9F53
60370B4C0110DBB42C25308F489A856B6664371FC2126BAF4710790021255653
CACDE1B9ED6AF5C696C3D8BEA4698DD9045B3004A5C4C03EA994A5445C9D4EB9
865266850047E28F2D82A08617E9283FE637CFAE4F7F261CC2D616A8C746EF23
7360553A6B434201944C04B1522533C61F615A20BA3678AF8D4BAD1FB548D82C
72D41699FB96EF40ABBABDEE633F05B4445BFC4E6E661DCBC8EC473BD2BBAF7F
75F7FC86CC7B1F3A2343EDEDF6B5F7E98A0BC4443E21611F4D807FE7F597A37A
A4DAF8A8E6D04FEFB320E0E25C61E156A72A3E4A69EDA04B0E3B72B69FC19E63
AA33A682663A8F37F4FFC1533CCA2A80DAA675DD723A7E13D9DAE3BB0F5F3E07
99BAB9B9BCFB29B73FC76EFA02F4F632690651DAAEC2B3688B636F0FCB156047
F8EF7239716BE5D3DB2FD1DAEEC11DC2D65CFBEDC1C950CA737A04FCCCA509C4
7E47664E160322366F70CCC641B9B49192AB839E0AC609AB2FDD3783095293C3
11C56740FB50D23AE9FEAF66DB13F35367B562F15161AA270EE44713881B2387
7889FD10198AD4D750390811714DAE7A8DC6F5770224E93408F8CCD4F8712A9B
3C583C983D98CCA7FF9DDDEF8AFA292781B1D7089336CA631413EA0728353E8B
3650EDED7ABB6E5DB5B85014A3A9C4C76EBB664A5B3E0F3CB2ECFBB6294F5C4F
69EA3AC8C071B122B129A28E04FE989DA9670EB6246806A516517DDBC52DC001
4C027D51EF1F98506F21E63D57FEF267B913F1ED4770D892239222F3A9035C35
FFA38D1AF3ED9A8C02235D7422695D30A2F801389DADF34CDC489EEB38089B6B
026D884EE1C24FE5785C383B988FFFEB5459A1644CA44D353503AE117E87F956
393DEF6C47D4E1C5B1A33835C9B8E1B98809DFEE43C4D6DBEF1C2B1ADE4B8F13
3B5D224C25927433D5738B0FE019CB88B1F373E4AC2BDB5BD86887FCFC50FA1F
3E01CC550BE5FA0703E1B89486C67E8A16C560DBC051028078BEF85B349D3058
55D633040BF5853FE9E50A671CA0A088959B2AACA1B614DBDBD906FBCB6A6B13
7ED6C5BF448F92E9EB110ECAEADA36CADF4B6D79703CA2EA9BBCC810A6E3532F
63C155FB86CBF6A6049D730B4729C613BD759AF3742399C6B118C1D2B38FBC4A
2324BCABE5841102D7040970F36DCEE10B8D8708CC440A7C71AB86921F94B67E
7E100DEED6F4DE49CABF3B3C9E46654FD0D8353E60C14EE5C1EF2D81F6DC3BFA
CCDAC376BDFE306F9F4C32A7524896F0BA32F94A828FC5E195316463CAB17F6B
AAB689AB63B6712CB36C864B045F317974D1AB96BF3268A0A0A831CF76C0A37C
528E6C29C15A96DFE471115228651256683850726E8B2D64BF59EAB3644DDA13
9A5E9C307EE3F79C82C4C792C77BDBC4F5835B1629D733C96B7EF186AAB24A2A
D26B3CA6E83112247D5D24B01909FDBA4AF03C9312042D3B80465F4EA2A54DF1
F683B997FA68E631BC48A75C643EFE1F651D1E41D769F883A75EF6E53DAD11CD
A4EA239FA3D3D16BCC6C36EB4A1D46683EBBFC251AB18CDF8B051463CE674E79
E56840662FEA36DB9CC89053F5E774BA121744DEC217914B998F834BCF8A1F4F
682EB51D6D355B104599FE0E9E5AFFA3832CA18FD77F44B1135FE6F834C245FC
CC3DCA7FC7F219A912F3EE4AB25AFAA16D9CD03305FFCE7841D95BE7643F9704
9659869A5EE57307636C67C01F36BBEF5D7AF1C56C0A2A3E06623AF193587F9D
446F85FEBFC6078ACAD584BB95172EE4804907B4FEDB376576F1E781A3CADDC7
3DB203ACC11C38D8EB1AFAAB30A99DEB491DCB28ED4BBE1943A8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258431 52099146 1000 8000 8000 (sig320-frank.dvi)
@start /Fa 158[554 12[609 14[665 1[719 67[{
TeXBase1Encoding ReEncodeFont}4 996.264 /Helvetica-Bold
rf /Fb 140[388 385 2[407 1[726 267 7[427 100[{}6 664.176
/CMMI6 rf /Fc 194[796 11[512 512 4[796 1[398 398 40[{}6
996.264 /CMR9 rf /Fd 144[496 1[902 306 5[497 1[531 13[597
14[802 1[753 3[768 5[284 59[{}10 996.264 /CMMI9 rf /Fe
136[665 2[277 1[388 2[498 498 4[277 1[498 277 442 1[442
1[498 12[554 14[609 1[665 21[332 42[498 2[{
TeXBase1Encoding ReEncodeFont}16 996.264 /Times-Italic
rf /Ff 158[739 12[812 14[886 1[959 67[{TeXBase1Encoding ReEncodeFont}4
1328.35 /Helvetica-Bold rf /Fg 134[393 2[393 1[246 344
344 1[443 443 8[246 393 1[393 14[492 443 541 1[541 639
591 738 3[295 1[639 541 541 1[591 1[541 14[443 443 1[246
221 1[221 4[295 39[{TeXBase1Encoding ReEncodeFont}29
885.568 /Times-Italic rf /Fh 3[443 101[443 27[393 443
1[639 443 443 246 344 295 1[443 443 443 689 246 443 1[246
443 443 295 393 443 393 443 393 3[295 1[295 3[836 1[639
541 492 591 639 492 639 639 787 541 639 344 295 639 639
492 541 639 591 591 639 6[246 443 443 443 443 443 443
443 443 443 443 246 221 295 221 2[295 295 37[492 2[{
TeXBase1Encoding ReEncodeFont}67 885.568 /Times-Roman
rf /Fi 134[498 498 719 1[554 332 388 442 1[554 498 554
830 277 554 1[277 554 498 332 442 554 442 554 498 12[665
554 2[609 775 719 4[388 2[609 665 719 719 8[332 7[498
498 2[249 332 3[332 332 37[554 2[{TeXBase1Encoding ReEncodeFont}40
996.264 /Times-Bold rf /Fj 158[554 12[609 14[665 1[719
67[{TeXBase1Encoding ReEncodeFont}4 996.264 /Helvetica
rf /Fk 133[442 498 498 719 498 498 277 388 332 498 498
498 498 775 277 498 277 277 498 498 332 442 498 442 498
442 3[332 1[332 1[719 1[940 1[719 609 554 665 1[554 719
719 886 609 2[332 719 719 554 609 719 665 665 719 3[562
1[277 277 1[498 498 498 498 498 498 498 498 1[277 249
332 249 562 1[332 332 6[332 29[554 554 2[{TeXBase1Encoding ReEncodeFont}
69 996.264 /Times-Roman rf /Fl 134[664 1[959 1[739 442
517 590 1[739 664 739 3[442 369 1[664 1[590 739 590 739
664 9[1328 959 959 886 739 959 1[812 1033 959 1[886 1033
1[517 1033 1[812 886 959 959 886 959 11[664 664 664 664
664 2[332 46[{TeXBase1Encoding ReEncodeFont}42 1328.35
/Times-Bold rf /Fm 134[553 2[553 615 308 553 369 615
1[615 615 922 246 553 246 246 1[615 308 615 615 553 615
615 11[799 676 2[861 3[922 615 9[738 1[1124 16[308 308
369 308 44[{TeXBase1Encoding ReEncodeFont}32 1106.96
/Helvetica rf /Fn 137[664 1[369 664 442 2[739 739 1107
295 664 295 295 739 739 1[739 739 2[739 11[959 1[886
2[886 6[369 1[1033 812 3[886 886 65[{TeXBase1Encoding ReEncodeFont}24
1328.35 /Helvetica rf /Fo 205[683 46[512 3[{}2 996.264
/CMSY9 rf /Fp 136[1550 2[664 1[775 2[1217 1217 4[554
1[1217 664 1108 1[1108 1[1108 12[1217 14[1329 1[1439
21[664 42[1217 2[{TeXBase1Encoding ReEncodeFont}16 1992.53
/Helvetica-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
HPSdict begin
/TargetAnchors
0 dict dup begin
end targetdump-hook def end
TeXDict begin
%%EndSetup
%%Page: 1 1
TeXDict begin HPSdict begin 1 0 bop 0 TeXcolorgray Black
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 9160 1430
a Fp(Content-a)-30 b(ware)553 b(T)-159 b(raf\002c)554
b(Engineering)41519 434 y Fo(\003)5009 5941 y Fn(Benjamin)367
b(F)-60 b(r)-13 b(ank)5509 7103 y Fm(T)-155 b(-Labs/TU)310
b(Ber)17 b(lin)2330 8265 y(bfr)-11 b(ank@net.t-labs)-17
b(.tu-ber)17 b(lin.de)21772 5941 y Fn(Ingmar)368 b(P)-66
b(oese)21760 7103 y Fm(T)-155 b(-Labs/TU)309 b(Ber)17
b(lin)18421 8265 y(ingmar@net.t-labs)-17 b(.tu-ber)17
b(lin.de)35375 5941 y Fn(Georgios)369 b(Smar)-13 b(agdakis)38010
7103 y Fm(T)-155 b(-Labs/TU)310 b(Ber)17 b(lin)34596
8265 y(georgios@net.t-labs)-17 b(.tu-ber)17 b(lin.de)14389
10255 y Fn(Ste)-40 b(v)-33 b(e)368 b(Uhlig)10221 11418
y Fm(Queen)309 b(Mar)33 b(y)-111 b(,)309 b(Univ)-28 b(ersity)309
b(of)f(London)11909 12580 y(ste)-33 b(v)-28 b(e@eecs)-17
b(.qm)-11 b(ul.ac.uk)29551 10255 y Fn(Anja)369 b(F)-40
b(eldmann)29885 11418 y Fm(T)-155 b(-Labs/TU)310 b(Ber)17
b(lin)27191 12580 y(anja@net.t-labs)-17 b(.tu-ber)17
b(lin.de)p Black 0 TeXcolorgray -2022 16021 a Fl(ABSTRA)-73
b(CT)-2022 17626 y Fk(Recent)253 b(studies)g(sho)-25
b(w)254 b(that)f(a)h(lar)-18 b(ge)254 b(fraction)f(of)g(Internet)h
(traf)-25 b(\002c)253 b(is)g(origi-)-2022 18788 y(nated)275
b(by)g(Content)g(Pro)-15 b(viders)274 b(\(CPs\))f(such)i(as)f(content)i
(distrib)-20 b(ution)274 b(net-)-2022 19951 y(w)-10 b(orks)329
b(and)i(h)-5 b(yper)-20 b(-giants.)552 b(T)-80 b(o)330
b(cope)h(with)g(the)f(increasing)h(demand)g(for)-2022
21113 y(content,)444 b(CPs)404 b(deplo)-10 b(y)406 b(massi)-25
b(v)-15 b(ely)405 b(distrib)-20 b(uted)405 b(serv)-15
b(er)404 b(infrastructures.)-2022 22275 y(Thus,)382 b(content)357
b(is)f(a)-20 b(v)-25 b(ailable)358 b(in)e(man)-15 b(y)357
b(netw)-10 b(ork)357 b(locations)f(and)h(can)g(be)-2022
23438 y(do)-25 b(wnloaded)249 b(by)e(tra)-20 b(v)-15
b(ersing)248 b(dif)-25 b(ferent)247 b(paths)g(in)h(a)f(netw)-10
b(ork.)309 b(Despite)248 b(the)-2022 24600 y(prominent)271
b(serv)-15 b(er)271 b(location)h(and)g(path)f(di)-25
b(v)-15 b(ersity)-65 b(,)277 b(the)272 b(decisions)f(on)g(ho)-25
b(w)-2022 25762 y(to)219 b(map)i(users)e(to)g(serv)-15
b(ers)219 b(by)h(CPs)f(and)h(ho)-25 b(w)221 b(to)e(perform)h(traf)-25
b(\002c)220 b(engineer)-20 b(-)-2022 26925 y(ing)268
b(by)f(ISPs,)272 b(are)c(independent.)367 b(This)267
b(leads)h(to)g(a)g(lose-lose)f(situation)h(as)-2022 28087
y(CPs)312 b(are)j(not)f(a)-15 b(w)-10 b(are)315 b(about)g(the)f(netw)
-10 b(ork)315 b(bottlenecks)f(nor)g(the)h(location)-2022
29249 y(of)271 b(end-users,)276 b(and)c(the)g(ISPs)e(struggle)i(to)f
(cope)h(with)g(rapid)f(traf)-25 b(\002c)272 b(shifts)-2022
30412 y(caused)249 b(by)h(the)f(dynamic)h(CP)f(serv)-15
b(er)249 b(selection)h(process.)-1026 31574 y(In)237
b(this)g(paper)h(we)f(propose)h(and)g(e)-25 b(v)g(aluate)239
b(Content-a)-15 b(w)-10 b(are)238 b(T)-35 b(raf)-25 b(\002c)237
b(En-)-2022 32736 y(gineering)388 b(\()p Fj(CaTE)p Fk(\),)f(which)h
(dynamically)h(adapts)g(the)f(traf)-25 b(\002c)387 b(demand)-2022
33898 y(for)211 b(content)h(hosted)g(on)f(CPs)g(by)g(utilizing)h(ISP)f
(netw)-10 b(ork)212 b(information)g(and)-2022 35061 y(end-user)250
b(location)i(during)e(the)h(serv)-15 b(er)251 b(selection)g(process.)
313 b(This)250 b(leads)h(to)-2022 36223 y(a)244 b(win-win)h(situation)f
(because)h(CPs)f(are)g(able)h(to)f(enhance)i(their)f(end-user)-2022
37385 y(to)198 b(serv)-15 b(er)198 b(mapping)h(and)g(ISPs)e(g)-5
b(ain)199 b(the)g(ability)g(to)f(partially)h(in\003uence)g(the)-2022
38548 y(traf)-25 b(\002c)294 b(demands)h(in)f(their)g(netw)-10
b(orks.)444 b(Indeed,)306 b(our)294 b(results)f(using)h(traces)-2022
39710 y(from)325 b(a)i(T)-35 b(ier)-20 b(-1)326 b(ISP)g(sho)-25
b(w)326 b(that)h(a)f(number)h(of)f(netw)-10 b(ork)327
b(metrics)f(can)h(be)-2022 40872 y(impro)-15 b(v)g(ed)249
b(when)h(utilizing)g Fj(CaTE)p Fk(.)-2022 43772 y Fl(Categories)332
b(and)f(Subject)g(Descriptors)-2022 45377 y Fk(C.2.1)393
b([)p Fi(Computer)-37 b(-Communication)393 b(Netw)-10
b(orks)p Fk(]:)598 b(Netw)-10 b(ork)394 b(Archi-)-2022
46539 y(tecture)288 b(and)g(Design;)306 b(C.2.3)287 b([)p
Fi(Netw)-10 b(ork)289 b(Operations)p Fk(]:)385 b(Netw)-10
b(ork)288 b(Man-)-2022 47701 y(agement)-2022 50601 y
Fl(K)-33 b(eyw)-13 b(ords)-2022 52206 y Fk(T)-35 b(raf)-25
b(\002c)353 b(Engineering,)381 b(Content)353 b(Deli)-25
b(v)-15 b(ery)-65 b(,)381 b(Load)354 b(Balancing,)381
b(Netw)-10 b(ork)-2022 53368 y(Optimization,)250 b(ISP-CDN)e
(Collaboration.)-2022 56267 y Fl(1.)1328 b(INTR)-40 b(ODUCTION)-1026
57706 y Fk(T)-80 b(oday)-65 b(,)259 b(a)e(lar)-18 b(ge)257
b(fraction)g(of)f(Internet)h(traf)-25 b(\002c)256 b(is)g(originated)h
(by)g(a)g(small)-2022 58869 y(number)236 b(of)f(Content)h(Pro)-15
b(viders)235 b(\(CPs\))f([5].)304 b(Major)236 b(CPs)e(are)i(highly)g
(pop-)-2022 60031 y(ular)279 b(rich)g(media)h(sites)f(lik)-10
b(e)280 b(Y)-110 b(ouT)-45 b(ube)280 b(and)g(Net\003ix,)287
b(One-Click)280 b(Hosters)-2022 61193 y(\(OCHs\),)203
b(e.)166 b(g.,)205 b(RapidShare)193 b(and)g(Me)-15 b(g)-5
b(aUpload,)206 b(as)192 b(well)i(as)e(Content)h(De-)-2022
62356 y(li)-25 b(v)-15 b(ery)246 b(Netw)-10 b(orks)246
b(\(CDN\))f(such)g(as)h(Akamai)g(and)h(Limelight,)f(and)g(h)-5
b(yper)-20 b(-)-2022 63518 y(giants,)452 b(e.)166 b(g.,)453
b(Google,)g(Y)-100 b(ahoo!,)453 b(and)413 b(Microsoft.)795
b(T)-80 b(o)412 b(cope)g(with)g(the)-2022 64680 y(increasing)351
b(demand)h(for)e(content,)377 b(CPs)349 b(deplo)-10 b(y)352
b(massi)-25 b(v)-15 b(ely)351 b(distrib)-20 b(uted)p
0 TeXcolorgray -2022 65748 13284 45 v -2022 66499 a Fo(\003)-1510
66942 y Fk(A)249 b(full)g(v)-15 b(ersion)249 b(of)g(this)f(paper)i(is)f
(a)-20 b(v)-25 b(ailable)250 b(in)g([4].)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -2022 69952
a Fh(Cop)-9 b(yright)220 b(is)i(held)f(by)g(the)h(author/o)-22
b(wner\(s\).)-2022 70948 y Fg(SIGMETRICS'12,)220 b Fh(June)i(11\22615,)
f(2012,)g(London,)f(England,)i(UK.)-2022 71945 y(A)-35
b(CM)221 b(978-1-4503-1097-0/12/06.)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 29858 27166 a @beginspecial 0 @llx 0 @lly
399 @urx 230 @ury 1912 @rwi @setspecial
%%BeginDocument: figs/trafficShift-illustration.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.8.10 (http://cairographics.org)
%%CreationDate: Tue Apr 10 10:45:25 2012
%%Pages: 1
%%BoundingBox: 0 0 399 230
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%EndComments
%%BeginProlog
/cairo_eps_state save def
/dict_count countdictstack def
/op_count count 1 sub def
userdict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/B { fill stroke } bind def
/B* { eofill stroke } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
%%EndProlog
11 dict begin
/FontType 42 def
/FontName /f-0-0 def
/PaintType 0 def
/FontMatrix [ 1 0 0 1 0 0 ] def
/FontBBox [ 0 0 0 0 ] def
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding 1 /uni0049 put
Encoding 2 /uni0053 put
Encoding 3 /uni0050 put
/CharStrings 4 dict dup begin
/.notdef 0 def
/uni0049 1 def
/uni0053 2 def
/uni0050 3 def
end readonly def
/sfnts [
<00010000000a008000030020636d6170001af086000003f4000000466376742041f443ea0000
043c000002146670676d73d323b00000065000000705676c7966c0bf9291000000ac00000348
68656164f4a5a66400000d5800000036686865610e4b060700000d9000000024686d74780fd1
020600000db4000000106c6f6361021a016c00000dc40000000a6d617870046907d000000dd0
00000020707265707ac85ef600000df0000002d50002004400000264055500030007002eb101
002f3cb2070408ed32b10605dc3cb2030208ed3200b103002f3cb2050408ed32b2070609fc3c
b2010208ed323311211125211121440220fe240198fe680555faab4404cd0000000100bd0000
017c05810003007a4046035a0f00010c0000013d10002000d000036000700002000010004000
5000b000050700af05010005a005b005030005100540055005a005b005c005f0050820059005
f0050305b8ffc0b3383d4805b8ffc0b32d304805b8ffc0b60d104801030012003f3f012b2b2b
5d71725d2f5e5d71725e5d5e5ded313033113311bdbf0581fa7f00000001005dffec04f80596
003f00e2406e963e01443e01a63b01863601843101972801a921010b211b212b219b2104591d
a91d028b11018b07019602010402140202843a016036016915017611012a5a2929005a40b013
01134180095a08401013480808345a001f101f401f03071f1310131648781388139813033b13
0134b8fff0402f131648773487349734033a34011334052f5f6f2a01592a014b2a01062a012a
24040e5f600901520901440901090513003f335d5d5ded3f335d5d5d5ded1239395d5d2b5d5d
2b012f5e5ded332f2bed1a10dc5d1aed322fed3130005d5d5d5d015d5d5d5d5d5d5d5d5d5d5d
5d5d01140e0223202427371e0333323e0235342e02272e0535343e0233321e0217072e032322
0e0215141e02171e0504f84590db96fef9feda28b90e3a639266558e66393f729e603b776d60
46285190c47283ba804d17bc0e35567b53628551233f6c8e50418176674c2b018559966d3db8
ae25375a41241d3c5f4245563826160d1f2b3a516b46648f5c2a29527950213350361c233c51
2f3f513624120f1f2b3a54720000000200a8000004ea0581000e001700754053a90201931701
9b10ab10020a031a032a0303050c150c250c03005a400f198040190140190114075a00081008
40080308065f1f142f144f145f147f14050f14cf14ff1403071440091148141407135f090307
12003f3fed12392f2b5e5d71ed012f5ded325d711a10dc1aed3130005d5d5d5d5d01140e0223
2111231121321e0207342623211121323604ea3d79b679fe62bf02517dba7c3ec0a4a4fe8501
83a59b03d95c9f7544fddb05813d6f9d61868bfdd49200000000000200030000000000140001
0000000000340004002000000004000400010000f003ffff0000f000ffff1000000100000000
000600120000000000040000000100020003000005cc05cc007d058100150079058100150000
000000000000000000000000043a001400770000ffec00000000ffec00000000ffec0000fe57
0000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000
000008000000000000b400bd00af00a00000000000000000000000000088007e000000ac0000
0000000000000000000000bf00c300ab00000000009b008d0000000000000000000000000000
00000000000000000000000000b900aa00000000000000940099008700000000000000000000
0000000000000000000000000000006a0083008d00a400b4000000000000000000000060006a
0079009800ac00b800a700000122013300c3006b00000000000000db00c90000000000000000
000000000000000000000000000001e101c9009200a8006b009200b7006b009b0000027b02f2
00920252006e02d703810082008900a0009f0169008f0000016000a4015b005e008200000000
0000005e0065006f0000000000000000000000000000008a009000a5007a0080000000000000
000000000581fff3000dfca700830089008f0096006900710000000000000000000000a801f9
00000000031f00a700ae00b500000000008100000000000000000748036a02b60202fd930000
009100670091006101d90000028d034100440511404559585554535251504f4e4d4c4b4a4948
47464544434241403f3e3d3c3b3a393837363531302f2e2d2c28272625242322211f18141110
0f0e0d0b0a090807060504030201002c4523466020b02660b004262348482d2c452346236120
b02661b004262348482d2c45234660b0206120b04660b004262348482d2c4523462361b02060
20b02661b02061b004262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd442320b801
5a51582320b08d44235920b0ed51582320b04d44235920b0042651582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b
4323430b2d2c00b0282370b101283e01b0282370b10228453ab10200080d2d2c2045b0032545
6164b050515845441b2121592d2c49b00e23442d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a03
458a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b21
21592d2c4b515845441b2121592d2c01b005251023208af500b0016023edec2d2c01b0052510
23208af500b0016123edec2d2c01b0062510f500edec2d2c462346608a8a462320468a608a61
b8ff8062232010238ab10c0c8a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2045b0032546524bb013515b58b0022546206861b00325b003253f2321381b2111592d
2c2045b00325465058b0022546206861b00325b003253f2321381b2111592d2c00b00743b006
430b2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59
b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840
00626023212d2c4b53588ab004254964234569b0408b61b08062b020616ab00e23442310b00e
f61b21238a121120392f592d2c4b535820b0032549646920b00526b0062549642361b08062b0
20616ab00e2344b0042610b00ef68a10b00e2344b00ef6b00e2344b00eed1b8ab00426111220
392320392f2f592d2c4523456023456023456023766818b08062202d2cb0482b2d2c2045b000
5458b040442045b04061441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f
2370b01423421b2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b01443
b0006063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b235158b9
0033ffe0b134201bb3330034005944442d2cb0164358b00326458a586466b01f601b64b02060
6620581b21b04059b001615923586559b02923442310b029e01b2121212121592d2cb0024354
584b53234b515a58381b2121591b21212121592d2cb0164358b004254564b020606620581b21
b04059b0016123581b6559b0292344b00525b00825082058021b0359b0042510b005252046b0
042523423cb00425b0072508b0072510b006252046b00425b0016023423c2058011b0059b004
2510b00525b029e0b02920456544b0072510b00625b029e0b00525b00825082058021b0359b0
0525b003254348b00425b0072508b00625b00325b0016043481b2159212121212121212d2c02
b00425202046b004252342b0052508b003254548212121212d2c02b0032520b0042508b00225
43482121212d2c452320451820b00050205823652359236820b040505821b04059235865598a
60442d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53
234b515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b21212121
592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b21212121592d2cb0024354
58b0492b1b212121592d2c208a08234b538a4b515a5823381b2121592d2c00b0022549b00053
5820b04038111b21592d2c014623466023466123201020468a61b8ff80628ab140408a704560
683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb012004b014b54422d2c
b1020042b123018851b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b014b5258b2020802
436042591bb940000080885458b202040243604259b94000008063b80100885458b202080243
604259b94000010063b80200885458b202100243604259b94000020063b80400885458b20240
0243604259595959592d2c451868234b51582320452064b04050587c59688a6059442d2cb000
16b00225b0022501b001233e00b002233eb10102060cb00a236542b00b234201b001233f00b0
02233fb10102060cb006236542b0072342b00116012d2c7a8a104523f5182d00000000010000
0001051e840508355f0f3cf5001f080000000000c755abb700000000c755abb7fe60fd930867
074800000008000200000000000000010000073efe4e004308c0fe60fef40867000100000000
00000000000000000000000402ec0044023900bd0556005d055600a80000002c0076014001a4
000000010000000401520054008c000500020010002f005a0000039e05c000030001b10940be
01070001001f01070001009f0104408e01c0fd01affd0100fd010a4ffb0120fb01f550281ff2
46281ff1462a1ff0462b1f5fef7fef020fef4fef5fef8fefafef050be5e41e1fe3e2461f0fe2
0140e246161fe1e0461fcfe0dfe0efe00340e0333646e046181fdd3ddf55de3d0355df010355
dc03ff1f0fd51fd5020fd51fd50240ca181b46cfc201bdc03c1fc150261fbcbe281fffb90150
b870b880b803b8ffc040ffb81232461fb73fb74fb76fb77fb79fb7afb70770b2a0b2b0b2030f
b20190b501b0b5010fb501080fb33fb3efb30380b090b002b0b0c0b0d0b0032faf3faf02a0ad
b0ad02c0add0ad022fac3fac029fab01c0aad0aa024fa98fa9022fa96fa9bfa9ffa9049c9b24
1f509b016f9601bf960196461d1f9594171f7f948f94ff94033091409102809101708f808f02
908f01c08fd08f024f8c5f8c6f8c038646ff1f9f85018483311f74733f1f7350261f6f6e3c1f
6e46351f1a01185519331855073303550603ff1f6050261f5f50261f5c46311f5b5a481f5a46
311f1332125505010355043203556f03010f033f0302ef51ff510240513538464051252846cf
405450014946201f4846351f4746351faf4601df46ef46028046011632155511010f5510320f
55020100550100011f1f0f3f0f5f0f7f0f040f0f2f0f4f0f6f0f8f0fdf0fff0f073f0f7f0fef
0f036f00018016010501b80190b154532b2b4bb807ff524bb007505bb00188b02553b00188b0
40515ab00688b000555a5b58b101018e59858d8d00421d4bb0325358b0601d594bb0645358b0
401d594bb0805358b0101db116004259747374752b2b2b2b2b017374752b2b2b00742b2b7373
752b2b2b012b2b2b002b2b2b2b2b2b012b2b002b2b012b732b00747374757374732b012b7475
00732b73740173737400737474737473015e737374737300732b7373012b002b012b00732b74
752b2b2b2b012b2b742b2b5e732b002b5e7374012b2b2b002b73735e73737301737373185e00
000000>
] def
FontName currentdict end definefont pop
11 dict begin
/FontType 42 def
/FontName /f-1-0 def
/PaintType 0 def
/FontMatrix [ 1 0 0 1 0 0 ] def
/FontBBox [ 0 0 0 0 ] def
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding 1 /uni0043 put
Encoding 2 /uni0050 put
Encoding 3 /uni0020 put
Encoding 4 /uni0053 put
Encoding 5 /uni0065 put
Encoding 6 /uni0072 put
Encoding 7 /uni0076 put
Encoding 8 /uni0041 put
Encoding 9 /uni006C put
Encoding 10 /uni0069 put
Encoding 11 /uni006E put
Encoding 12 /uni0074 put
Encoding 13 /uni0048 put
Encoding 14 /uni0067 put
Encoding 15 /uni0068 put
Encoding 16 /uni0079 put
Encoding 17 /uni0075 put
Encoding 18 /uni007A put
Encoding 19 /uni0064 put
Encoding 20 /uni006B put
Encoding 21 /uni0073 put
Encoding 22 /uni0066 put
/CharStrings 23 dict dup begin
/.notdef 0 def
/uni0043 1 def
/uni0050 2 def
/uni0020 3 def
/uni0053 4 def
/uni0065 5 def
/uni0072 6 def
/uni0076 7 def
/uni0041 8 def
/uni006C 9 def
/uni0069 10 def
/uni006E 11 def
/uni0074 12 def
/uni0048 13 def
/uni0067 14 def
/uni0068 15 def
/uni0079 16 def
/uni0075 17 def
/uni007A 18 def
/uni0064 19 def
/uni006B 20 def
/uni0073 21 def
/uni0066 22 def
end readonly def
/sfnts [
<00010000000a008000030020636d617000a2f14100000d900000006c63767420e997070c0000
0dfc000002306670676d5b026bdf0000102c000000ac676c79664c03e257000000ac00000ce4
68656164ef4bbae0000010d8000000366868656108b8021a0000111000000024686d74786ec7
0e05000011340000005c6c6f636100008ef000001190000000606d61787005bd0427000011f0
00000020707265703ac7c007000012100000071b00020068fe96046805a400030007001fbc00
040114000000060114b6010805830204002fc4d4ec310010d4ecd4ec30131121112521112168
0400fc73031bfce5fe96070ef8f27206290000000001008bffe3043105f00019002e401a19b3
00b21697030db30cb21097099603991a13320c003106301a10fcec32ec310010e4f4ecf4ec10
eef6ee30250e0123200011100021321617152e012322021110123332363704314da25bfee1fe
c3013f011d5ba24d4aaa56c5c4c4c558a94935292901960170016e01992929cf3d40fed0fecd
fecefed0403d0000000200c50000047505d500080013002b40180197100097098812100a0802
040005320d3811001e09331410fcec32fcec11173931002ff4ecd4ec30011133323635342623
252132041514042b011123018fea8c9d9c8dfe4c01b4fa0102fefffbeaca052ffdcf94858593
a6e3dbdde2fda80000000001008bffe3044a05f000270084403d0d0c020e0b251e1f1e080902
070a251f1f1e420a0b1e1f040115b314a718971101b300a7049725961199281e0a0b1f1b0700
261b390e3114073922302810fcecc4fcece4111239393939310010e4f4ecf4ec10eef6ee1117
39304b535807100eed11173907100eed1117395922b2080201015d400a070007010702030702
015d005d01152e012322061514161f011e0115140423222627351e013332363534262f012e01
35342433321603f45cb95e8fa66d956ad2c0fef8fc69d46b73cd6899aa75916cd0bc010ddf56
be05a2cd3b3c85716368231831d2b5d5e02d2dd74944897b707620192fbea0c8f1270002007b
ffe30458047b0015001c00454026001603010a8b098d0616b601068c0d01c1198c13be0d991d
03021c1009160600491c1210481d10f4ecfcecc411123939310010e4f4ece410ee10ee10f4ee
123911393001152115141633323637150e01232000111000333212072e01232206070458fce3
bfae58c06d69c35bfefbfeda0120f0d6f7b804918885ac10025e5a06b7c83839b72b2b013901
13010c0140fedec5a2a9b09c0001016a00000483047b0011004f401306070b03001103970ebe
09c2070a060600081210d4c4ec3231002fe4f4ecd4cc11391139304025100010011011200020
012011300030013310301140004001431040115000500150105011125d012e01232206151123
1133153e013332161704833b7a49acb6b9b92ebf8344763603792e2ad8ccfdd30460db777f22
24000000000100640000046d0460000600654029031704050402170102050504021703020600
06011700000642020300c205060503020105044900450710f4ec173931002fe43239304b5358
071005ed071008ed071008ed071005ed5922b2270201005d400e070007010803080404050225
02025d015d1333090133012364bf01450146bffe72ed0460fc5403acfba000020025000004ac
05d50002000a0098404100250100040504022505040725050406250505040925030a0825030a
01250a030a0025020003030a420003079701b00388090509080706040302010009052f0a0b10
dcec173931002f3ce4fcec1239304b5358071008ed071005ed0705ed0705ed071005ed0705ed
0705ed071008ed5922b2070301015d401a0a000f008f008f000403010b0204030c0409070608
86018902085d005d01032101330123032103230268d501aafeb1f501c9d16efdf56cd10523fd
0403aefa2b0185fe7b00000100a00000040a061f000d002640130900030ab60cc503b6050306
0400060b4c090e10d4ecfccc393931002fecfcec113939300114163b01152322263511213521
027f5b59d7e9a5b5fed901df01967c7e9cd4c203f990000200b20000044406140009000d002e
401908b6000cc40a9b00c20602b604034c0b0106054c004b0a070e10d43ce4ecfc3cec31002f
ec32e4fcec10ee300121112115213521112101331523010001d7016dfc6e016dfee1011fb8b8
0460fc2f8f8f03420243e900000100c30000041b047b0013002c4018090e03000301068c11be
0cc20a010206004a0d09060b461410f4ec32fcec31002f3ce4f4ec1117393930011123113426
2322061511231133153e01333216041bb96a71818bb8b831a873aba902b6fd4a02b6978eb7ab
fd870460a86063e100000001008300000408059e0013003140180e05080f03b6001101c208b6
0a080b090204000610120e1410d43cc4fc3cc432393931002fecf43cc4ec3211393930011121
15211114163b0115232226351121352111026601a2fe5e5e75cfe1cfaafed5012b059efec28f
fda07c6293a6cb02608f013e000100890000044805d5000b00264014089702b10400880a0607
031e053109011e00300c10fcec32fcec3231002f3ce432fcec30133311211133112311211123
89cb0229cbcbfdd7cb05d5fd9c0264fa2b02c7fd390000000002007bfe480412047b000b0029
00484027190c1e1b270903128b1316098c1e168c0f038c24be1e0fc328c22a271900060c4706
121221482a10f4c4ecfcec3232310010e4e4c4f4ec10ee10ee10d5ee11123939113939300134
2623220615141633323613140223222627351e013332363d020e012322021110123332161735
33035a8781878e8f887f87b8eee74ca65362a04395882c986dc4eaeac46c962fb80239cfd7d7
cfcfd9dafeddfcfefc1c1bb62e2ca2b0087d5e5c013a01070108013a565a91000000000100c3
0000041b06140013002c4018090e03000301068c11be0c9b0a010206004a0d09060b461410f4
ec32fcec31002f3cecf4ec11173939300111231134262322061511231133113e01333216041b
b96a71818bb8b831a873aba902b6fd4a02b6978eb7abfd870614fda46063e10000010068fe56
04810460001200a040450d170e0d0203020a0b02090c17030302111712001210170f10000012
101711100d0e0d0f170e0e0d4210130d000e098c07c3110ec21311100f0d0a07000712081249
0e451310f4ecc4111739310010e432f4ec1139391239304b5358071005ed071008ed071008ed
071005ed071005ed111739071008ed5922b2381201015d401a041076100208110812190c190d
260e260f381149114912590d0a5d005d01060702070e012b0135333236370133090133035a2e
4763222e8a5c946d515c47fe4fc3014c0147c3016875bffef83a4e4e9a5ec4044efc94036c00
0000000100c3ffe3041b045e0013002c4018090e03000301068c11990a01c20c0d09060b4a02
0600461410f4ecfcec3231002fe432f4ec11173939301311331114163332363511331123350e
01232226c3b86b70828ab9b931a971aca801a802b6fd4a978eb7ab0279fba2a86164e1000000
000100cb00000410046200090058401c031707080708170203024208b600c203b60508030004
01490006450a10f4c4ec3211393931002fecf4ec304b5358071005ed071005ed5922b2380801
015d40153603380845034a085703580865036a0875037a080a5d13211501211521350121e303
2dfd7d0283fcbb0283fd950462a8fcdc96aa032500000002007bffe3041206140010001c0030
401a0500141a8c0e148c08990ebe019b0317040006024711120b481d10f4ecfcec323231002f
ece4f4ec10ee113939300111331123350e012322021110123332160114163332363534262322
06035ab8b82e9964cbe9eaca659afe0f8885858b8b85858803d10243f9ec8d5357013b011501
11013757fe0bd6dadcd4d5dbda00000100ec000004b20614000b00c5403a0817090805060507
1706060509170302081707080302051706050203020417030302420805020303c2009b0a0608
05040306090106064400450c10f4ecec3211173931002f3cece41739304b5358071005ed0710
08ed0708ed0704ed071005ed071008ed5922b2080701015d4052060208081602180518083502
3405360846026602750276050c0903080819031704180519061a0718082803270528073b033b
043705390737084a034907590659076b0369046906690779037805790679071c5d005d133311
013309012301071123ecbe01e3e0fe4701fee1fe6289be0614fc7b01d1fe5afd46024281fe3f
000100d5ffe30406047b0027007540400d0c020e0b171f1e080902070a171e1f1e421d1e180a
0b1e1f0415008b01c004148b15c0188c11048c25be1199281d0a0b1f1b07004f1b060e490706
1422452810f4c4ecfcece4111239393939310010e4f4ec10fef5ee10f5ee121739111239304b
535807100eed111739070eed111739592201152e012322061514161f011e0115140623222627
351e0133323635342f022e0135343633321603cd4fa0537d7b5cb74a898decd253b66a67bc54
7a86f508459f92daca5aa60439b42e2e51534b4a230e1a9c7da6bb2323be353563598031020e
1f937fa1af210000000100c300000427061400130034401a0510010c08b606018c009b0e06c2
0a021307000905060d0f0b1410d43cc4fc3cc432393931002fe432fcec10ee32123939300115
2322061d01211521112311213521353436330427d1634d0181fe7fb8fed5012ba9b306149951
67638ffc2f03d18f4eb8ae000000000000020003000000000014000100000000003400040020
00000004000400010000f016ffff0000f000ffff100000010000000000060038000000000017
0000000100020003000400050006000700080009000a000b000c000d000e000f001000110012
001300140015001600b800cb00b800cb00aa019100b80066000000b80087027f000200020002
0002000200b800c300cb000200cb00b800b801cb018901ba00cb00a600fc00cb008300f2010a
03c70137008300be00000058042100cb008f009c00020002008f03e7007503bc00d300c900db
007503e7013903ba00cb01d3002101df00b800890002000200020002000203be008900c303be
007b03be0358011f016d00a401ae0000007b00b8016f007f027b00b80252008f00cd04d10000
00cd00870087009300a4006f00cd00cb00b80083019100dd00b4008b00f4009802e9005a00b4
00ba00c5042100fe000e00020002000201d500f6007f02aa023d0266008b00c5008f009a009a
018300d500730400010a00fe00e105d5022b00a400b4009c00000062009c05d505980087027f
05d505d505f000a40000001d06b80614072301d300b800cb00a601bc0131024e00d3010a007b
0054035c037103db01850423047703e9008f02000360006a00cf05d50614008f0723008f0666
0179046004600460047b0000007b0277046001aa00e90614076203f8007b022100c5009c007f
027b000000b40252054e054e04d10066009c009c0066009c008f0066009c008f061000cd03fa
0083009102fe01480446033f008f007b044c009800a200000027006f0000006f0335006a006f
007b058d058d058d058d00aa00aa002d058d0396027b00f6007f02aa0133023d009c0266018b
008f02f600cd006f034400370066001d05ee008501b406140000077d007305d500001400b707
060504030201002c2010b002254964b040515820c859212d2cb002254964b040515820c85921
2d2c20100720b00050b00d7920b8ffff5058041b0559b0051cb0032508b0042523e120b00050
b00d7920b8ffff5058041b0559b0051cb0032508e12d2c4b505820b80117454459212d2cb002
254560442d2c4b5358b00225b0022545445921212d2c45442d2cb00225b0022549b00525b005
254960b0206368208a108a233a8a10653a2d0001000000024ccc2842056c5f0f3cf5001f0800
00000000c76891e000000000c76891e0fb8afd0105be08550000000800000001000000000001
0000076dfe1d000004d1fb8aff1405be00010000000000000000000000000000001704d10068
04d1008b04d100c504d1000004d1008b04d1007b04d1016a04d1006404d1002504d100a004d1
00b204d100c304d1008304d1008904d1007b04d100c304d1006804d100c304d100cb04d1007b
04d100ec04d100d504d100c3000000000000004c000000d80000014c0000014c000002480000
02f0000003800000040c000004dc000005340000059c0000060c00000680000006d8000007a0
00000810000008fc0000096c000009f400000a8400000b8000000c6c00000ce4000100000017
020c002b006b0006000200100099000800000557011100050004b902800115b2945d05411c01
1500960003011500800004011400fe0003011300fe0003011200120003011100fe0003011000
fe0003010f009a0003010e00fe0003010db2eb47054125010d007d0003010c00250003010b00
320003010a00960003010900fe00030108000e0003010700fe0003010600250003010500fe00
030104000e0003010300250003010200fe000301014059fe03fefe03fd7d03fcfe03fbfe03fa
3203f9bb03f87d03f7f68c05f7fe03f7c004f6f55905f68c03f68004f5f42605f55903f54004
f42603f3f22f05f3fa03f22f03f1fe03f0fe03ef3203ee1403ed9603eceb4705ecfe03ecb8ff
d140ff04eb4703eae96405ea9603e96403e8fe03e7e61b05e7fe03e61b03e5fe03e46b03e3fe
03e2bb03e1e01905e1fa03e01903df9603defe03ddfe03dcdb1505dcfe03db1503da9603d9d8
1505d9fe03d88d0b05d81503d77d03d63a03d58d0b05d53a03d4fe03d3d20a05d3fe03d20a03
d1fe03d0fe03cf8a1105cf1c03ce1603cdfe03cc9603cb8b2505cbfe03cafe03c97d03c8fe03
c7fe03c6fe03c59a0d05c4fe03c3fe03c2fe03c1fe03c08d0b05c01403bf0c03bebdbb05befe
03bdbc5d05bdbb03bd8004bcbb2505bc5d03bc4004bb2503bafe03b99603b88f4105b7fe03b6
8f4105b6fa03b59a0d05b4fe03b36403b26403b10e03b01203affe03aefe40fd03adfe03acfe
03ab1203aafe03a9a80e05a93203a80e03a7a61105a72803a61103a5a42d05a57d03a42d03a3
fe03a2fe03a1fe03a09f1905a064039f9e10059f19039e10039d0a039cfe039b9a0d059bfe03
9a0d0399982e0599fe03982e03978f41059796039695bb0596fe0395945d0595bb0395800494
902505945d0394400493fe0392fe039190250591bb039025038f8b25058f41038e8d0b058e14
038d0b038c8b25058c64038b8a11058b25038a110389fe0388fe0387fe038685110586fe0385
110384fe0383fe038211420582530381fe038078037f7e7d057ffe037e7d037d1e037cfe037b
0e037afe0377fe0376fe0375740c05750f0375b8010040da04740c0374c00473120373400472
fe0371fe0370fe036f6e53056f96036e6d28056e53036d28036cfe036b32036afe0369320368
fa0367bb0366fe0365fe0364fe0363621e0563fe0362001005621e0361fe0360fe035ffe035e
5a0b055e0e035d64035cc8035b5a0b055b14035a0b0359fe0358140357fe0356fe03551b1905
55320354fe0353fe0352fe03517d0350fe034f14034efe034d012d054dfe034cbb034b28034a
4918054a3703494312054918034845180548fe03474312054764034645180546bb0345180344
4312054437034342110543120343b8024040090442410f0542110342b8020040090441400e05
410f0341b801c0400904403f0c05400e0340b801804009043f0c09053f0c033fb80140406404
3efe033d012d053dfa033cfe033b28033afe033911420539640338311a05384b0337fe03362d
140536fe03354b0334301a05344b0333301a0533fe033211420532fe03312d1405311a03301a
032f2d14052f18032e0916052ebb032d2c13052d14032db802804009042c1011052c13032cb8
02404096042b2a25052bfe032a0916052a250329023a0529fe0328fe0327fe03260f03251642
05254503240f0323fe03220f0f0522fe0321202d05217d03202d031f4b031e1142051efe031d
fe031c1b19051cfe031b0010051b19031afe0319fe0318fe031716420517460316152d051642
0315141005152d03141003130010051314031211420512fe0311012d05114203100f0f051011
0310b802004009040f0e0c050f0f030fb801c04009040e0d0a050e0c030eb801804009040d0c
09050d0a030db80140b4040c09030cb801004037040bfe030a0916050afe0309160308100307
fe0306012d0506fe0305140303023a0503fa0302012d05023a0301001005012d0300100301b8
0164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d0000>
] def
FontName currentdict end definefont pop
11 dict begin
/FontType 42 def
/FontName /f-2-0 def
/PaintType 0 def
/FontMatrix [ 1 0 0 1 0 0 ] def
/FontBBox [ 0 0 0 0 ] def
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding 1 /uni0043 put
Encoding 2 /uni0050 put
Encoding 3 /uni0020 put
Encoding 4 /uni0053 put
Encoding 5 /uni0065 put
Encoding 6 /uni0072 put
Encoding 7 /uni0076 put
Encoding 8 /uni0042 put
/CharStrings 9 dict dup begin
/.notdef 0 def
/uni0043 1 def
/uni0050 2 def
/uni0020 3 def
/uni0053 4 def
/uni0065 5 def
/uni0072 6 def
/uni0076 7 def
/uni0042 8 def
end readonly def
/sfnts [
<00010000000a008000030020636d6170002bf0a700000618000000506376742000691d390000
0668000001fe6670676d7134766a00000868000000ab676c79669202015e000000ac0000056c
68656164f34bbbfa0000091400000036686865610cb8065a0000094c00000024686d74782944
045a00000970000000246c6f63610000171400000994000000286d61787004760671000009bc
00000020707265703b07f100000009dc0000056800020066fe96046605a400030007001a400c
04fb0006fb0108057f0204002fc4d4ec310010d4ecd4ec301311211125211121660400fc7303
1bfce5fe96070ef8f272062900010073ffe3052705f000190036401a0da10eae0a951101a100
ae04951791118c1a07190d003014101a10fcec32ec310010e4f4ecf4ec10eef6ee30b40f1b1f
1b02015d01152e0123200011100021323637150e01232000111000213216052766e782ff00fe
f00110010082e7666aed84feadfe7a0186015386ed0562d55f5efec7fed8fed9fec75e5fd348
48019f01670168019f470000000200c90000048d05d500080013003a40180195100095098112
100a0802040005190d3f11001c09041410fcec32fcec11173931002ff4ecd4ec30400b0f151f
153f155f15af1505015d011133323635342623252132041514042b0111230193fe8d9a9a8dfe
3801c8fb0101fefffbfeca052ffdcf92878692a6e3dbdde2fda800010087ffe304a205f00027
007e403c0d0c020e0b021e1f1e080902070a021f1f1e420a0b1e1f0415010015a11494189511
049500942591118c281e0a0b1f1b0700221b190e2d071914222810dcc4ecfcece41112393939
39310010e4f4e4ec10eef6ee10c6111739304b535807100eed11173907100eed1117395922b2
0f2901015db61f292f294f29035d01152e012322061514161f011e0115140421222627351e01
3332363534262f012e01353424333216044873cc5fa5b377a67ae2d7feddfee76aef807bec72
adbc879a7be2ca0117f569da05a4c53736807663651f192bd9b6d9e0302fd04546887e6e7c1f
182dc0abc6e4260000020071ffe3047f047b0014001b00704024001501098608880515a90105
b90c01bb18b912b80c8c1c1b1502081508004b02120f451c10fcecf4ecc4111239310010e4f4
ece410ee10ee10f4ee1112393040293f1d701da01dd01df01d053f003f013f023f153f1b052c
072f082f092c0a6f006f016f026f156f1b095d71015d0115211e0133323637150e0123200011
1000333200072e0123220607047ffcb20ccdb76ac76263d06bfef4fec70129fce20107b802a5
889ab90e025e5abec73434ae2a2c0138010a01130143feddc497b4ae9e00000100ba0000034a
047b001100304014060b0700110b03870eb809bc070a06080008461210fcc4ec3231002fe4f4
ecc4d4cc11123930b450139f1302015d012e012322061511231133153e0133321617034a1f49
2c9ca7b9b93aba85132e1c03b41211cbbefdb20460ae6663050500000001003d0000047f0460
000600fb402703110405040211010205050402110302060006011100000642020300bf050605
0302010504000710d44bb00a5458b90000004038594bb014544bb015545b58b90000ffc03859
c4173931002fec3239304b5358071005ed071008ed071008ed071005ed592201408e48026a02
7b027f02860280029102a402080600060109030904150015011a031a04260026012903290420
08350035013a033a043008460046014903490446054806400856005601590359045008660066
0169036904670568066008750074017b037b0475057a06850085018903890489058606960096
0197029a03980498059706a805a706b008c008df08ff083e5d005d133309013301233dc3015e
015ec3fe5cfa0460fc5403acfba00000000300c9000004ec05d5000800110020004340231900
950a0995128101950aad1f110b080213191f05000e1c1605191c2e09001c12042110fcec32fc
ecd4ec111739393931002fececf4ec10ee3930b20f2201015d01112132363534262301112132
363534262325213216151406071e01151404232101930144a39d9da3febc012b94919194fe0b
0204e7fa807c95a5fef0fbfde802c9fddd878b8c850266fe3e6f727170a6c0b189a21420cb98
c8da00000002000300000000001400010000000000340004002000000004000400010000f008
ffff0000f000ffff10000001000000000006001c000000000009000000010002000300040005
000600070008013500b800cb00cb00c100aa009c01a600b800660000007100cb00a002b20085
007500b800c301cb0189022d00cb00a600f000d300aa008700cb03aa0400014a003300cb0000
00d9050200f4015400b4009c01390114013907060400044e04b4045204b804e704cd00370473
04cd04600473013303a2055605a60556053903c5021200c9001f00b801df007300ba03e90333
03bc0444040e00df03cd03aa00e503aa0404000000cb008f00a4007b00b80014016f007f027b
0252008f00c705cd009a009a006f00cb00cd019e01d300f000ba018300d5009803040248009e
01d500c100cb00f600830354027f00000333026600d300c700a400cd008f009a0073040005d5
010a00fe022b00a400b4009c00000062009c0000001d032d05d505d505d505f0007f007b0054
00a406b80614072301d300b800cb00a601c301ec069300a000d3035c037103db0185042304a8
0448008f0139011401390360008f05d5019a0614072306660179046004600460047b009c0000
0277046001aa00e904600762007b00c5007f027b000000b4025205cd006600bc006600770610
00cd013b01850389008f007b0000001d00cd074a042f009c009c0000077d006f0000006f0335
006a006f007b00ae00b2002d0396008f027b00f600830354063705f6008f009c04e10266008f
018d02f600cd03440029006604ee00730000140000960000b707060504030201002c2010b002
254964b040515820c859212d2cb002254964b040515820c859212d2c20100720b00050b00d79
20b8ffff5058041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff5058041b05
59b0051cb0032508e12d2c4b505820b0fd454459212d2cb002254560442d2c4b5358b00225b0
022545445921212d2c45442d2cb00225b0022549b00525b005254960b0206368208a108a233a
8a10653a2d000001000000024cccc04069605f0f3cf5001f080000000000c76891d400000000
c76891d4f7d6fd330d72095500000008000000010000000000010000076dfe1d00000de2f7d6
fa510d7200010000000000000000000000000000000904cd00660596007304d300c9028b0000
0514008704ec0071034a00ba04bc003d057d00c90000000000000044000000dc0000015c0000
015c000002540000032800000398000004bc0000056c0001000000090354002b0068000c0002
00100099000800000415021600080004b8028040fffbfe03fa1403f92503f83203f79603f60e
03f5fe03f4fe03f32503f20e03f19603f02503ef8a4105effe03ee9603ed9603ecfa03ebfa03
eafe03e93a03e84203e7fe03e63203e5e45305e59603e48a4105e45303e3e22f05e3fa03e22f
03e1fe03e0fe03df3203de1403dd9603dcfe03db1203da7d03d9bb03d8fe03d68a4105d67d03
d5d44705d57d03d44703d3d21b05d3fe03d21b03d1fe03d0fe03cffe03cefe03cd9603cccb1e
05ccfe03cb1e03ca3203c9fe03c6851105c61c03c51603c4fe03c3fe03c2fe03c1fe03c0fe03
bffe03befe03bdfe03bcfe03bbfe03ba1103b9862505b9fe03b8b7bb05b8fe03b7b65d05b7bb
03b78004b6b52505b65d40ff03b64004b52503b4fe03b39603b2fe03b1fe03b0fe03affe03ae
6403ad0e03acab2505ac6403abaa1205ab2503aa1203a98a4105a9fa03a8fe03a7fe03a6fe03
a51203a4fe03a3a20e05a33203a20e03a16403a08a4105a096039ffe039e9d0c059efe039d0c
039c9b19059c64039b9a10059b19039a1003990a0398fe0397960d0597fe03960d03958a4105
95960394930e05942803930e0392fa039190bb0591fe03908f5d0590bb039080048f8e25058f
5d038f40048e25038dfe038c8b2e058cfe038b2e038a8625058a410389880b05891403880b03
878625058764038685110586250385110384fe038382110583fe0382110381fe0380fe037ffe
0340ff7e7d7d057efe037d7d037c64037b5415057b25037afe0379fe03780e03770c03760a03
75fe0374fa0373fa0372fa0371fa0370fe036ffe036efe036c21036bfe036a1142056a530369
fe03687d036711420566fe0365fe0364fe0363fe0362fe03613a0360fa035e0c035dfe035bfe
035afe0359580a0559fa03580a035716190557320356fe035554150555420354150353011005
531803521403514a130551fe03500b034ffe034e4d10054efe034d10034cfe034b4a13054bfe
034a4910054a1303491d0d05491003480d0347fe0346960345960344fe0343022d0543fa0342
bb03414b0340fe033ffe033e3d12053e14033d3c0f053d12033c3b0d053c40ff0f033b0d033a
fe0339fe033837140538fa033736100537140336350b05361003350b03341e03330d0332310b
0532fe03310b03302f0b05300d032f0b032e2d09052e10032d09032c32032b2a25052b64032a
2912052a25032912032827250528410327250326250b05260f03250b0324fe0323fe03220f03
210110052112032064031ffa031e1d0d051e64031d0d031c1142051cfe031bfa031a42031911
420519fe031864031716190517fe031601100516190315fe0314fe0313fe031211420512fe03
11022d05114203107d030f64030efe030d0c16050dfe030c0110050c16030bfe030a100309fe
0308022d0508fe030714030664030401100504fe03401503022d0503fe0302011005022d0301
100300fe0301b80164858d012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d00>
] def
FontName currentdict end definefont pop
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 0 399 230
%%EndPageSetup
q
0.588235 g
0.659933 w
0 J
0 j
[] 0.0 d
4 M q 0.685229 1 1 -0.685229 0 229.658066 cm
35.685 264.142 m 38.986 292.52 l S Q
q 0.685229 1 1 -0.685229 0 229.658066 cm
33.045 264.142 m 36.346 292.521 l S Q
1 g
179.496 207.494 m 144.633 207.494 114.547 197.217 100.684 182.404 c 
95.5 183.314 90.125 183.787 84.625 183.787 c 40.984 183.787 5.562 
153.693 5.562 116.615 c 5.562 79.541 40.984 49.447 84.625 49.447 c 
84.625 27.639 107.648 9.935 136.016 9.935 c 145.953 9.935 155.227 
12.127 163.094 15.889 c 176.41 7.213 193.055 2.033 211.121 2.033 c 
254.766 2.033 290.184 32.127 290.184 69.201 c 290.184 74.283 289.516 
79.236 288.258 83.994 c 307.84 90.689 321.809 108.084 321.809 128.471 c 
321.809 154.642 298.785 175.885 270.418 175.885 c 268.047 175.885 
265.711 175.724 263.426 175.439 c 253.395 193.908 219.609 207.494 
179.496 207.494 c h
179.496 207.494 m f
0.294118 g
4.063705 w
1 j
q 1 0 0 -1 0 229.658066 cm
179.496 22.164 m 144.633 22.164 114.547 32.441 100.684 47.254 c 95.5 
46.344 90.125 45.871 84.625 45.871 c 40.984 45.871 5.562 75.965 5.562 
113.043 c 5.562 150.117 40.984 180.211 84.625 180.211 c 84.625 202.02 
107.648 219.723 136.016 219.723 c 145.953 219.723 155.227 217.531 
163.094 213.77 c 176.41 222.445 193.055 227.625 211.121 227.625 c 
254.766 227.625 290.184 197.531 290.184 160.457 c 290.184 155.375 
289.516 150.422 288.258 145.664 c 307.84 138.969 321.809 121.574 
321.809 101.188 c 321.809 75.016 298.785 53.773 270.418 53.773 c 
268.047 53.773 265.711 53.934 263.426 54.219 c 253.395 35.75 219.609 
22.164 179.496 22.164 c h
179.496 22.164 m S Q
0.784314 g
BT
115.2 0 0 115.2 67.948291 63.53199 Tm
/f-0-0 1 Tf
<010203>Tj
ET
0.588235 g
0.634144 w
0 j
q 0.767454 1 1 -0.767454 0 229.658066 cm
-42.754 133.39 m 13.715 89.369 l S Q
q 0.767454 1 1 -0.767454 0 229.658066 cm
-41.486 135.928 m 15.984 91.124 l S Q
0.790524 w
q 1 -0.1553 -0.1553 -1 0 229.658066 cm
114.322 28.004 m 180.999 17.778 l S Q
q 1 -0.1553 -0.1553 -1 0 229.658066 cm
114.468 31.59 m 181.146 21.364 l S Q
0.79937 w
q 1 0 0 -1 0 229.658066 cm
14.227 111.41 m 94.227 49.012 l S Q
q 1 0 0 -1 0 229.658066 cm
15.824 114.609 m 95.824 52.211 l S Q
0.8 w
q 1 0 0 -1 0 229.658066 cm
98.41 153.035 m 179.898 195.871 l S Q
q 1 0 0 -1 0 229.658066 cm
99.258 149.371 m 180.746 192.207 l S Q
0.794768 w
q 1 -0.114932 -0.114932 -1 0 229.658066 cm
171.969 168.579 m 196.278 95.68 l S Q
q 1 -0.114932 -0.114932 -1 0 229.658066 cm
169.032 166.577 m 193.341 93.677 l S Q
0.8 w
q 1 0 0 -1 0 229.658066 cm
275.27 96.512 m 190.164 118.289 l S Q
q 1 0 0 -1 0 229.658066 cm
275.469 99.938 m 190.363 121.711 l S Q
q 1 0 0 -1 0 229.658066 cm
283.824 102.609 m 287.824 137.012 l S Q
q 1 0 0 -1 0 229.658066 cm
280.625 102.609 m 284.625 137.012 l S Q
q 1 0 0 -1 0 229.658066 cm
180.816 113.012 m 183.215 57.012 l S Q
q 1 0 0 -1 0 229.658066 cm
184.016 113.012 m 186.414 57.012 l S Q
q 1 0 0 -1 0 229.658066 cm
193.426 47.367 m 257.426 51.367 l S Q
q 1 0 0 -1 0 229.658066 cm
193.426 50.566 m 257.426 54.566 l S Q
q 1 0 0 -1 0 229.658066 cm
269.426 61.012 m 279.824 87.41 l S Q
q 1 0 0 -1 0 229.658066 cm
266.227 61.012 m 276.625 87.41 l S Q
q 1 0 0 -1 0 229.658066 cm
108.625 52.211 m 177.426 113.012 l S Q
q 1 0 0 -1 0 229.658066 cm
105.848 54.234 m 174.648 115.035 l S Q
0.631126 w
q 0.777316 1 1 -0.777316 0 229.658066 cm
23.339 81.448 m 35.14 71.916 l S Q
q 0.777316 1 1 -0.777316 0 229.658066 cm
25.864 83.974 m 37.667 74.444 l S Q
1 g
110.227 183.049 m 110.227 178.631 106.645 175.049 102.227 175.049 c 
97.809 175.049 94.227 178.631 94.227 183.049 c 94.227 187.467 97.809 
191.049 102.227 191.049 c 106.645 191.049 110.227 187.467 110.227 
183.049 c h
110.227 183.049 m f
0.498039 g
2.834646 w
q 1 0 0 -1 0 229.658066 cm
110.227 46.609 m 110.227 51.027 106.645 54.609 102.227 54.609 c 97.809 
54.609 94.227 51.027 94.227 46.609 c 94.227 42.191 97.809 38.609 
102.227 38.609 c 106.645 38.609 110.227 42.191 110.227 46.609 c h
110.227 46.609 m S Q
1 g
193.426 180.646 m 193.426 176.228 189.844 172.646 185.426 172.646 c 
181.008 172.646 177.426 176.228 177.426 180.646 c 177.426 185.064 
181.008 188.646 185.426 188.646 c 189.844 188.646 193.426 185.064 
193.426 180.646 c h
193.426 180.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
193.426 49.012 m 193.426 53.43 189.844 57.012 185.426 57.012 c 181.008 
57.012 177.426 53.43 177.426 49.012 c 177.426 44.594 181.008 41.012 
185.426 41.012 c 189.844 41.012 193.426 44.594 193.426 49.012 c h
193.426 49.012 m S Q
1 g
189.426 108.646 m 189.426 104.228 185.844 100.646 181.426 100.646 c 
177.008 100.646 173.426 104.228 173.426 108.646 c 173.426 113.064 
177.008 116.646 181.426 116.646 c 185.844 116.646 189.426 113.064 
189.426 108.646 c h
189.426 108.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
189.426 121.012 m 189.426 125.43 185.844 129.012 181.426 129.012 c 
177.008 129.012 173.426 125.43 173.426 121.012 c 173.426 116.594 
177.008 113.012 181.426 113.012 c 185.844 113.012 189.426 116.594 
189.426 121.012 c h
189.426 121.012 m S Q
1 g
297.426 84.646 m 297.426 80.228 293.844 76.646 289.426 76.646 c 285.008 
76.646 281.426 80.228 281.426 84.646 c 281.426 89.064 285.008 92.646 
289.426 92.646 c 293.844 92.646 297.426 89.064 297.426 84.646 c h
297.426 84.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
297.426 145.012 m 297.426 149.43 293.844 153.012 289.426 153.012 c 
285.008 153.012 281.426 149.43 281.426 145.012 c 281.426 140.594 
285.008 137.012 289.426 137.012 c 293.844 137.012 297.426 140.594 
297.426 145.012 c h
297.426 145.012 m S Q
1 g
161.426 49.56 m 161.426 45.142 157.844 41.56 153.426 41.56 c 149.008 
41.56 145.426 45.142 145.426 49.56 c 145.426 53.978 149.008 57.56 
153.426 57.56 c 157.844 57.56 161.426 53.978 161.426 49.56 c h
161.426 49.56 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
161.426 180.098 m 161.426 184.516 157.844 188.098 153.426 188.098 c 
149.008 188.098 145.426 184.516 145.426 180.098 c 145.426 175.68 
149.008 172.098 153.426 172.098 c 157.844 172.098 161.426 175.68 
161.426 180.098 c h
161.426 180.098 m S Q
1 g
273.426 176.646 m 273.426 172.228 269.844 168.646 265.426 168.646 c 
261.008 168.646 257.426 172.228 257.426 176.646 c 257.426 181.064 
261.008 184.646 265.426 184.646 c 269.844 184.646 273.426 181.064 
273.426 176.646 c h
273.426 176.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
273.426 53.012 m 273.426 57.43 269.844 61.012 265.426 61.012 c 261.008 
61.012 257.426 57.43 257.426 53.012 c 257.426 48.594 261.008 45.012 
265.426 45.012 c 269.844 45.012 273.426 48.594 273.426 53.012 c h
273.426 53.012 m S Q
1 g
17.426 112.646 m 17.426 108.228 13.844 104.646 9.426 104.646 c 5.008 
104.646 1.426 108.228 1.426 112.646 c 1.426 117.064 5.008 120.646 9.426 
120.646 c 13.844 120.646 17.426 117.064 17.426 112.646 c h
17.426 112.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
17.426 117.012 m 17.426 121.43 13.844 125.012 9.426 125.012 c 5.008 
125.012 1.426 121.43 1.426 117.012 c 1.426 112.594 5.008 109.012 9.426 
109.012 c 13.844 109.012 17.426 112.594 17.426 117.012 c h
17.426 117.012 m S Q
1 g
289.824 134.646 m 289.824 130.228 286.242 126.646 281.824 126.646 c 
277.406 126.646 273.824 130.228 273.824 134.646 c 273.824 139.064 
277.406 142.646 281.824 142.646 c 286.242 142.646 289.824 139.064 
289.824 134.646 c h
289.824 134.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
289.824 95.012 m 289.824 99.43 286.242 103.012 281.824 103.012 c 
277.406 103.012 273.824 99.43 273.824 95.012 c 273.824 90.594 277.406 
87.012 281.824 87.012 c 286.242 87.012 289.824 90.594 289.824 95.012 c 
h
289.824 95.012 m S Q
1 g
109.426 76.646 m 109.426 72.228 105.844 68.646 101.426 68.646 c 97.008 
68.646 93.426 72.228 93.426 76.646 c 93.426 81.064 97.008 84.646 
101.426 84.646 c 105.844 84.646 109.426 81.064 109.426 76.646 c h
109.426 76.646 m f
0.498039 g
q 1 0 0 -1 0 229.658066 cm
109.426 153.012 m 109.426 157.43 105.844 161.012 101.426 161.012 c 
97.008 161.012 93.426 157.43 93.426 153.012 c 93.426 148.594 97.008 
145.012 101.426 145.012 c 105.844 145.012 109.426 148.594 109.426 
153.012 c h
109.426 153.012 m S Q
1 g
94.133 81.822 m 18.133 109.822 l f*
0.588235 g
0.8 w
q 1 0 0 -1 0 229.658066 cm
94.133 147.836 m 18.133 119.836 l S Q
1 g
92.531 78.623 m 16.531 106.623 l f*
0.588235 g
q 1 0 0 -1 0 229.658066 cm
92.531 151.035 m 16.531 123.035 l S Q
1 g
41.625 228.947 106.207 -18.105 re f
0 g
1.417323 w
1 j
q 1 0 0 -1 0 229.658066 cm
41.625 0.711 106.207 18.105 re S Q
BT
14.4 0 0 14.4 45.002769 214.652678 Tm
/f-1-0 1 Tf
[<0102>1<0304>1<0506>1<0705>1<0603>1<08>]TJ
ET
1 g
265.43 222.322 106.211 -18.102 re f
0 g
q 1 0 0 -1 0 229.658066 cm
265.43 7.336 106.211 18.102 re S Q
1 g
292.562 66.412 106.211 -18.102 re f
0 g
q 1 0 0 -1 0 229.658066 cm
292.562 163.246 106.211 18.102 re S Q
BT
14.4 0 0 14.4 275.354734 208.685344 Tm
/f-2-0 1 Tf
[<01>-1<0203>-1<040506>-1<070506>-1<0308>]TJ
1.910233 -10.846141 Td
[<01>-1<0203>-1<040506>-1<070506>-1<0301>]TJ
ET
0.588235 g
0.79937 w
0 j
q 1 0 0 -1 0 229.658066 cm
268.625 46.609 m 288.625 30.609 l S Q
q 1 0 0 -1 0 229.658066 cm
271.824 49.812 m 291.824 33.812 l S Q
1 g
183.824 34.135 72.422 -15.773 re f
0 g
1.417323 w
1 j
q 1 0 0 -1 0 229.658066 cm
183.824 195.523 72.422 15.773 re S Q
BT
14.4 0 0 14.4 193.829346 21.100301 Tm
/f-1-0 1 Tf
[<0109>1<0a05>1<0b0c>]TJ
ET
1 g
182.227 35.732 72.418 -15.773 re f
0 g
q 1 0 0 -1 0 229.658066 cm
182.227 193.926 72.418 15.773 re S Q
BT
14.4 0 0 14.4 192.229346 22.700301 Tm
/f-1-0 1 Tf
[<0109>1<0a05>1<0b0c>]TJ
ET
1 g
180.625 37.334 72.418 -15.773 re f
0 g
q 1 0 0 -1 0 229.658066 cm
180.625 192.324 72.418 15.773 re S Q
BT
14.4 0 0 14.4 190.629346 24.300301 Tm
/f-1-0 1 Tf
[<0109>1<0a05>1<0b0c>]TJ
ET
1 g
179.023 38.935 72.422 -15.773 re f
0 g
q 1 0 0 -1 0 229.658066 cm
179.023 190.723 72.422 15.773 re S Q
BT
14.4 0 0 14.4 189.029346 25.900301 Tm
/f-1-0 1 Tf
[<0109>1<0a05>1<0b0c>]TJ
ET
2.4 w
0 j
[ 4.8 2.4 1.2 2.4] 0 d
q 1 0 0 -1 0 229.658066 cm
101.426 21.012 m 101.426 21.012 101.266 34.809 101.426 54.609 c 101.586 
74.414 85.426 132.098 103.023 153.012 c 120.625 173.926 153.75 174.07 
153.559 180.504 c 153.371 186.934 161.023 196.719 180.75 199.691 c S Q
4.8 w
[ 14.4 4.8] 0 d
q 1 0 0 -1 0 229.658066 cm
181.426 199.184 m 181.426 199.184 151.68 198.914 153.426 179.184 c 
155.172 159.457 179.57 142.375 182.273 117.605 c 184.977 92.836 168.551 
62.477 185.141 47.531 c 201.734 32.586 247 57.926 263.727 52.523 c 
280.457 47.117 293.426 28.098 293.426 28.098 c S Q
[ 9.6 4.8 2.4 4.8] 0 d
q 1 0 0 -1 0 229.658066 cm
181.426 199.184 m 181.426 199.184 151.68 198.914 153.426 179.184 c 
155.172 159.457 169.426 140.098 182.273 117.605 c 195.121 95.113 
243.855 107.953 273.32 97.449 c 302.781 86.945 284.516 127.422 289.426 
144.098 c 294.332 160.773 309.426 160.098 309.426 160.098 c S Q
BT
16 0 0 16 205.425 77.560261 Tm
/f-1-0 1 Tf
[<0d0a>1<0e0f>1<0910>1<03>]TJ
-0.601562 -1 Td
[<110c>1<0a09>1<0a12>1<0513>]TJ
1.203125 -1 Td
[<090a>1<0b14>]TJ
ET
0.8 w
[] 0.0 d
q 1 0 0 -1 0 229.658066 cm
213.426 156.098 m 172.41 150.281 l S Q
180.379 74.662 m 171.355 79.51 l 181.371 81.662 l 179.559 79.81 179.164 
76.982 180.379 74.662 c h
180.379 74.662 m f*
166.977 100.537 m 153.422 99.971 134.047 93.974 120.273 75.037 c 
117.426 77.56 l 117.426 69.209 l 118.227 69.209 l 118.227 69.236 l 
126.477 69.51 l 123.699 72.084 l 137.348 91.221 153.516 95.373 167.023 
95.935 c 166.977 100.537 l h
166.977 100.537 m f*
1.082835 w
q 1 0 0 -1 0 229.658066 cm
166.977 129.121 m 153.422 129.688 134.047 135.684 120.273 154.621 c 
117.426 152.098 l 117.426 160.449 l 118.227 160.449 l 118.227 160.422 l 
126.477 160.148 l 123.699 157.574 l 137.348 138.438 153.516 134.285 
167.023 133.723 c 166.977 129.121 l h
166.977 129.121 m S Q
BT
13.352784 8.814941 -8.814941 13.352784 116.625165 79.960061 Tm
/f-1-0 1 Tf
[<150f>1<0a16>1<0c>]TJ
ET
4 w
[ 12 4] 0 d
q 1 0 0 -1 0 229.658066 cm
95.43 20.586 m 95.43 20.586 95.676 36.543 95.836 56.348 c 95.996 76.148 
80.242 135.184 97.84 156.098 c 115.441 177.012 142.672 179.805 148.906 
185.156 c 155.141 190.508 175.023 201.699 175.023 201.699 c S Q
Q
showpage
%%Trailer
count op_count sub {pop} repeat
countdictstack dict_count sub {end} repeat
cairo_eps_state restore
%%EOF

%%EndDocument
 @endspecial 29359 29435 a Fi(Figur)-18 b(e)250 b(1:)308
b(Content-awar)-18 b(e)251 b(traf\002c)e(engineering)h(pr)-18
b(ocess.)p 0 TeXcolorgray 27201 31353 a Fk(serv)j(er)385
b(infrastructures)f(to)g(replicate)i(content)f(and)h(mak)-10
b(e)385 b(it)g(accessible)27201 32515 y(from)249 b(dif)-25
b(ferent)249 b(locations)h(in)f(the)h(Internet)f([2].)28198
33677 y(The)397 b(unprecedented)i(gro)-25 b(wth)398 b(of)f(demand)h
(for)f(content)h(and)g(the)g(re-)27201 34840 y(sulting)203
b(massi)-25 b(v)-15 b(e)203 b(deplo)-10 b(yment)205 b(of)e(content)h
(deli)-25 b(v)-15 b(ery)204 b(infrastructures)e(pose)27201
36002 y(ne)-25 b(w)305 b(challenges)g(both)g(to)f(CPs)f(and)i(to)f
(ISPs.)473 b(F)-15 b(or)304 b(CPs,)317 b(the)304 b(cost)g(of)g(de-)
27201 37164 y(plo)-10 b(ying)298 b(and)g(maintaining)g(such)f(a)h
(massi)-25 b(v)-15 b(e)297 b(infrastructure)g(has)g(signi\002-)27201
38327 y(cantly)242 b(increased)g(during)g(the)f(last)g(fe)-25
b(w)242 b(years)f([8])g(and)h(the)f(price)h(char)-18
b(ged)27201 39489 y(for)295 b(deli)-25 b(v)-15 b(ering)296
b(traf)-25 b(\002c)295 b(to)g(end-users)g(has)g(decreased)h(due)g(to)f
(the)g(intense)27201 40651 y(competition.)624 b(Furthermore,)380
b(CPs)353 b(struggle)g(to)h(engineer)h(and)f(manage)27201
41814 y(their)323 b(infrastructures,)340 b(replicate)324
b(content)g(based)f(on)f(end-user)h(demand,)27201 42976
y(and)342 b(assign)f(users)f(to)h(appropriate)h(serv)-15
b(ers.)585 b(The)341 b(latter)g(is)g(challenging)27201
44138 y(due)233 b(to)f(the)h(mis-location)f(of)g(end-users)g([1].)303
b(Furthermore,)236 b(inferring)c(the)27201 45301 y(netw)-10
b(ork)286 b(conditions)g(within)f(an)h(ISP)e(without)i(direct)f
(information)h(from)27201 46463 y(the)250 b(netw)-10
b(ork)250 b(is)e(dif)-25 b(\002cult)249 b([6].)28198
47625 y(Moreo)-15 b(v)g(er)-40 b(,)219 b(due)212 b(to)f(highly)g
(distrib)-20 b(uted)211 b(serv)-15 b(er)212 b(deplo)-10
b(yment)212 b(and)g(adap-)27201 48788 y(ti)-25 b(v)-15
b(e)318 b(serv)-15 b(er)317 b(assignment,)334 b(the)317
b(traf)-25 b(\002c)317 b(injected)h(by)g(CPs)e(is)g(v)-20
b(olatile.)514 b(F)-15 b(or)27201 49950 y(e)g(xample,)325
b(if)309 b(one)g(of)f(its)g(locations)h(is)f(o)-15 b(v)g(erloaded,)325
b(a)309 b(CP)f(will)h(re-assign)27201 51112 y(end-users)332
b(to)g(other)g(locations,)353 b(resulting)332 b(in)g(lar)-18
b(ge)332 b(traf)-25 b(\002c)332 b(shifts)f(in)h(the)27201
52274 y(ISP)219 b(netw)-10 b(ork)221 b(within)f(minutes.)299
b(Current)219 b(ISP)g(traf)-25 b(\002c)220 b(engineering)h(adapts)27201
53437 y(the)230 b(routing)f(and)h(operates)f(on)h(time)f(scales)g(of)g
(se)-25 b(v)-15 b(eral)230 b(hours)e([3],)233 b(thus,)g(is)27201
54599 y(too)250 b(slo)-25 b(w)249 b(to)g(react)h(to)f(rapid)g(traf)-25
b(\002c)249 b(changes)h(caused)g(by)g(CPs.)27201 57477
y Fl(2.)1329 b(THE)332 b Ff(CaTE)g Fl(APPR)-40 b(O)-53
b(A)-73 b(CH)28198 58916 y Fk(The)382 b(pressure)g(for)g(cost)h
(reduction)g(and)g(customer)g(satisf)-10 b(action)382
b(that)27201 60078 y(both)357 b(CPs)f(and)h(ISPs)f(are)h(confronted)g
(with,)384 b(coupled)357 b(with)g(the)g(oppor)-20 b(-)27201
61240 y(tunity)300 b(that)g(massi)-25 b(v)-15 b(ely)299
b(distrib)-20 b(uted)300 b(serv)-15 b(er)299 b(infrastructures)g(of)-25
b(fer)-40 b(,)312 b(moti-)27201 62403 y(v)-25 b(ate)298
b(us)e(to)h(propose)g(a)f(ne)-25 b(w)298 b(tool)f(in)f(the)h(traf)-25
b(\002c)297 b(engineering)h(landscape.)27201 63565 y(W)-80
b(e)345 b(introduce)f Fe(Content-awar)-37 b(e)343 b(T)-55
b(r)-15 b(af)d(\002c)344 b(Engineering)g Fk(\()p Fj(CaTE)p
Fk(\).)e Fj(CaTE)27201 64727 y Fk(le)-25 b(v)-15 b(erages)337
b(the)f(location)g(di)-25 b(v)-15 b(ersity)336 b(of)-25
b(fered)336 b(by)g(CPs)e(and,)358 b(through)336 b(this,)27201
65890 y(enables)354 b(adaptation)h(to)e(traf)-25 b(\002c)353
b(demand)h(shifts.)620 b(In)353 b(f)-10 b(act,)379 b
Fj(CaTE)353 b Fk(relies)27201 67052 y(on)344 b(the)g(observ)-25
b(ation)343 b(that)h(by)g(selecting)f(an)h(appropriate)g(serv)-15
b(er)344 b(among)27201 68214 y(those)306 b(a)-20 b(v)-25
b(ailable)308 b(to)e(deli)-25 b(v)-15 b(er)306 b(the)g(content,)321
b(the)307 b(path)f(of)g(the)g(traf)-25 b(\002c)306 b(in)g(the)27201
69377 y(netw)-10 b(ork)242 b(can)g(be)g(in\003uenced)h(in)e(a)h
(desired)f(w)-10 b(ay)-65 b(.)307 b(Figure)242 b(1)f(illustrates)g(the)
27201 70539 y(basic)331 b(concept)g(of)f Fj(CaTE)p Fk(.)f(The)h
(content)h(requested)g(by)f(the)g(client)h(is)e(in)27201
71701 y(principle)237 b(a)-20 b(v)-25 b(ailable)237 b(from)f(three)g
(serv)-15 b(ers)235 b(\(A,)h(B,)g(and)g(C\))f(in)h(the)h(netw)-10
b(ork.)p 0 TeXcolorgray 0 TeXcolorgray eop end end
%%Page: 2 2
TeXDict begin HPSdict begin 2 1 bop 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray -2022 -915 a Fk(Ho)-25 b(we)g(v)-15
b(er)-40 b(,)278 b(the)272 b(client)h(only)e(connects)i(to)e(one)i(of)e
(the)h(netw)-10 b(ork)272 b(locations.)-2022 247 y(T)-80
b(oday)-65 b(,)414 b(the)380 b(decision)h(of)f(where)i(the)e(client)h
(will)g(connect)g(to)g(is)f(solely)-2022 1409 y(done)287
b(by)h(the)f(CP)g(and)g(is)g(partially)h(based)f(on)h(measurements)f
(and/or)h(in-)-2022 2571 y(ference)245 b(of)g(netw)-10
b(ork)245 b(information)g(and)h(end-user)e(location.)309
b(W)-40 b(ith)245 b Fj(CaTE)-2022 3734 y Fk(the)284 b(decision)h(on)g
(end-user)g(to)f(serv)-15 b(er)284 b(assignment)h(can)g(be)g(enhanced)h
(by)-2022 4896 y(recommendations)358 b(of)-25 b(fered)357
b(by)g(the)g(ISP)-111 b(.)357 b(In)f(the)i(illustration,)383
b(a)357 b(highly)-2022 6058 y(utilized)252 b(path)g(can)g(be)g(a)-20
b(v)g(oided)253 b(by)f(mapping)h(users)e(to)g(serv)-15
b(er)252 b(A)g(and)g(as)f(a)-2022 7221 y(consequence)g(shift)d(traf)-25
b(\002c)249 b(to)g(less)g(congested)h(links.)-1026 8383
y Fj(CaTE)242 b Fk(complements)i(the)g(e)-15 b(xisting)243
b(traf)-25 b(\002c)243 b(engineering)i(solutions)d(by)-2022
9545 y(focusing)318 b(on)g(traf)-25 b(\002c)318 b(demands)h(rather)f
(than)g(routing,)336 b(by)318 b(combining)h(\(i\))-2022
10708 y(the)205 b(kno)-25 b(wledge)206 b(of)f(CPs)f(about)h(their)g
(location)h(di)-25 b(v)-15 b(ersity)205 b(and)g(serv)-15
b(er)205 b(load,)-2022 11870 y(with)214 b(\(ii\))g(the)g(ISPs)f
(detailed)i(kno)-25 b(wledge)216 b(of)e(the)h(netw)-10
b(ork)215 b(conditions)f(and)-2022 13032 y(end-user)290
b(location.)432 b(This)289 b(can)i(be)f(achie)-25 b(v)-15
b(ed)292 b(without)e(either)h(party)f(shar)-20 b(-)-2022
14195 y(ing)375 b(sensiti)-25 b(v)-15 b(e)376 b(operational)g
(information.)688 b(T)-80 b(o)376 b(this)f(end)h(the)g(ISP)f(ranks)
-2022 15357 y(candidate)346 b(serv)-15 b(ers)345 b(that)h(are)f
(communicated)i(by)f(the)g(CP)e(based)i(on)f(the)-2022
16519 y(netw)-10 b(ork)384 b(conditions)g(and)g(the)g(source)f(of)h
(demand)g(that)g(can)g(be)g(either)-2022 17681 y(the)411
b(resolv)-15 b(er)411 b(or)g(the)h(end-user)f([7].)795
b Fj(CaTE)410 b Fk(of)-25 b(fers)410 b(additional)i(traf)-25
b(\002c)-2022 18844 y(engineering)329 b(capabilities)h(to)e(ISPs)g(to)g
(better)h(manage)h(the)f(v)-20 b(olatility)329 b(of)-2022
20006 y(CP)368 b(traf)-25 b(\002c.)669 b(Also,)399 b(thanks)369
b(to)g(the)g(recommendations)i(of)-25 b(fered)369 b(by)g(ISP)-2022
21168 y(netw)-10 b(orks,)389 b(CPs)361 b(g)-5 b(ain)362
b(the)g(ability)g(to)f(better)h(assign)f(end-users)g(to)h(their)-2022
22331 y(serv)-15 b(ers)304 b(and)h(better)g(amortize)g(the)h(cost)e(of)
h(deplo)-10 b(ying)305 b(and)h(maintaining)-2022 23493
y(their)283 b(infrastructure.)412 b(Furthermore,)293
b(the)284 b(b)-20 b(urden)284 b(of)g(measuring)g(and)g(in-)-2022
24655 y(ferring)304 b(netw)-10 b(ork)306 b(topology)-65
b(,)320 b(and)306 b(the)f(state)h(of)e(the)i(netw)-10
b(ork,)320 b(both)305 b(chal-)-2022 25818 y(lenging)286
b(problems,)296 b(is)285 b(remo)-15 b(v)g(ed)287 b(from)f(the)g(CPs.)
419 b(In)285 b(short,)295 b(all)286 b(in)-40 b(v)-20
b(olv)-15 b(ed)-2022 26980 y(parties,)473 b(including)430
b(the)f(end-users,)473 b(bene\002t)429 b(from)g Fj(CaTE)p
Fk(,)f(creating)h(a)-2022 28142 y(win-win)249 b(situation)g(for)g(e)-25
b(v)-15 b(eryone.)-1026 29305 y(F)g(ormally)-65 b(,)400
b(we)370 b(model)h(the)f(netw)-10 b(ork)370 b(as)g(a)g(directed)g
(graph)g Fd(G)p Fc(\()p Fd(V)57 b(;)171 b(E)57 b Fc(\))-2022
30467 y Fk(where)319 b Fd(V)547 b Fk(is)318 b(the)h(set)g(of)g(nodes)g
(and)g Fd(E)377 b Fk(is)318 b(the)h(set)g(of)g(links.)518
b(An)319 b(origin-)-2022 31629 y(destination)359 b(\(OD\))h(\003o)-25
b(w)360 b Fd(f)7774 31747 y Fb(od)9022 31629 y Fk(consists)e(of)i(all)f
(traf)-25 b(\002c)360 b(entering)g(the)f(net-)-2022 32791
y(w)-10 b(ork)344 b(at)h(a)f(gi)-25 b(v)-15 b(en)345
b(point)g Fd(o)465 b Fo(2)g Fd(V)572 b Fk(\(origin\))343
b(and)i(e)-15 b(xiting)345 b(the)f(netw)-10 b(ork)345
b(at)-2022 33954 y(some)352 b(point)g Fd(d)481 b Fo(2)f
Fd(V)580 b Fk(\(destination\).)618 b(The)352 b(traf)-25
b(\002c)353 b(on)f(a)h(link)f(is)g(the)g(su-)-2022 35116
y(perposition)270 b(of)g(all)g(OD)h(\003o)-25 b(ws)270
b(that)g(tra)-20 b(v)-15 b(erse)271 b(the)f(link.)372
b(The)270 b(relationship)-2022 36278 y(between)319 b(link)g(and)g(OD)f
(\003o)-25 b(w)319 b(traf)-25 b(\002c)319 b(is)e(e)-15
b(xpressed)319 b(by)f(the)h(routing)f(ma-)-2022 37441
y(trix)e Fd(A)p Fk(.)512 b(If)316 b Fd(A)2955 37559 y
Fb(ml)4417 37441 y Fc(=)414 b(1)317 b Fk(the)g(OD)g(\003o)-25
b(w)318 b Fd(m)f Fk(tra)-20 b(v)-15 b(erses)316 b(link)h
Fd(l)17 b Fk(.)511 b(The)317 b(routing)-2022 38603 y(matrix)287
b Fd(A)h Fk(can)g(be)h(deri)-25 b(v)-15 b(ed)288 b(from)g(routing)g
(protocols,)297 b(e.g.,)h(OSPF)-80 b(,)288 b(ISIS,)-2022
39765 y(BGP)-111 b(.)318 b(Let)h Fi(y)f Fk(be)h(a)g(v)-15
b(ector)319 b(of)g(traf)-25 b(\002c)319 b(counts)f(on)h(links)f(and)h
Fi(x)g Fk(the)g(v)-15 b(ector)-2022 40928 y(of)293 b(traf)-25
b(\002c)295 b(counts)f(in)g(OD)g(\003o)-25 b(ws,)306
b(then)294 b Fi(y)p Fk(=)p Fd(A)p Fi(x)p Fk(.)444 b(T)-35
b(raditional)294 b(traf)-25 b(\002c)294 b(engi-)-2022
42090 y(neering)277 b(reduces)h(to)f(controlling)h(and)g(optimizing)f
(the)h(routing)f(function)-2022 43252 y(and)393 b(to)f(steering)g(traf)
-25 b(\002c)393 b(through)f(the)h(netw)-10 b(ork)393
b(in)g(the)f(most)g(ef)-25 b(fecti)g(v)-15 b(e)-2022
44415 y(w)-10 b(ay)-65 b(.)479 b(T)-35 b(ranslated)306
b(into)g(the)g(abo)-15 b(v)g(e)306 b(matrix)g(form,)320
b(traf)-25 b(\002c)305 b(engineering)i(is)-2022 45577
y(the)231 b(process)f(of)h(adjusting)g Fd(A)p Fk(,)k(gi)-25
b(v)-15 b(en)231 b(the)g(OD)h(\003o)-25 b(ws)231 b Fi(x)p
Fk(,)j(so)d(as)f(to)h(in\003uence)-2022 46739 y(the)366
b(link)h(traf)-25 b(\002c)367 b Fi(y)f Fk(in)h(a)g(desirable)g(w)-10
b(ay)-65 b(.)662 b(In)366 b Fj(CaTE)p Fk(,)g(we)h(re)-25
b(visit)366 b(traf)-25 b(\002c)-2022 47901 y(engineering)233
b(by)f(focusing)h(on)f(traf)-25 b(\002c)232 b(demands)h(rather)f
(routing)h(changes:)-2022 49064 y Fi(De\002nition)277
b(1:)366 b(Content-awar)-18 b(e)278 b(T)-74 b(raf\002c)278
b(Engineering)g(\()p Fa(CaTE)p Fi(\))e Fk(is)h(the)-2022
50226 y(process)362 b(of)g(adjusting)h(the)g(traf)-25
b(\002c)363 b(demand)h(v)-15 b(ector)363 b Fi(x)p Fk(,)391
b(gi)-25 b(v)-15 b(en)364 b(a)e(routing)-2022 51388 y(matrix)249
b Fd(A)p Fk(,)g(so)g(as)f(to)i(change)g(the)g(link)f(traf)-25
b(\002c)249 b Fi(y)p Fk(.)-1026 52551 y(Not)284 b(all)h(traf)-25
b(\002c)284 b(can)h(be)f(adjusted)h(arbitrarily)-65 b(.)414
b(Only)285 b(traf)-25 b(\002c)284 b(for)g(which)-2022
53713 y(location)232 b(di)-25 b(v)-15 b(ersity)231 b(is)g(a)-20
b(v)-25 b(ailable)233 b(can)f(be)g(adjusted)g(by)f Fj(CaTE)p
Fk(.)g(Therefore,)-2022 54875 y Fi(x)p Fk(=)p Fi(x)-464
54986 y Fb(r)-2 54875 y Fk(+)p Fi(x)1058 54986 y Fb(s)1783
54875 y Fk(where)283 b Fi(x)4997 54986 y Fb(r)5742 54875
y Fk(and)f Fi(x)7960 54986 y Fb(s)8686 54875 y Fk(denote)h(the)g
(content)g(demands)g(that)f(can)h(be)-2022 56038 y(adjusted)374
b(and)h(can)g(not)f(be)g(adjusted)h(\(as)e(there)i(is)e(only)i(a)f
(single)g(loca-)-2022 57200 y(tion\))220 b(respecti)-25
b(v)-15 b(ely)-65 b(.)300 b(The)220 b(de)-15 b(gree)221
b(of)f(freedom)h(in)f(adjusting)g(traf)-25 b(\002c)220
b(highly)-2022 58362 y(depends)331 b(on)g(the)h(di)-25
b(v)-15 b(ersity)331 b(of)g(locations)g(from)g(which)h(the)f(content)h
(can)-2022 59525 y(be)281 b(obtained.)405 b(W)-80 b(e)282
b(can)g(re)-25 b(write)281 b(the)h(relation)f(between)h(traf)-25
b(\002c)281 b(counts)g(on)-2022 60687 y(links)d(and)h(traf)-25
b(\002c)278 b(counts)h(in)g(\003o)-25 b(ws)278 b(as)g(follo)-25
b(ws:)368 b Fi(y)p Fk(=)p Fd(A)p Fk(\()p Fi(x)18264 60798
y Fb(s)18985 60687 y Fc(+)279 b Fi(x)20558 60798 y Fb(r)21020
60687 y Fk(\).)397 b Fj(CaTE)-2022 61849 y Fk(adjusts)242
b(the)i(traf)-25 b(\002c)243 b(on)g(each)i(link)e(of)g(the)g(netw)-10
b(ork)244 b(by)f(adjusting)h(the)f(con-)-2022 63011 y(tent)308
b(demands)g Fi(x)4127 63122 y Fb(r)4589 63011 y Fk(:)427
b Fi(y)5791 63122 y Fb(r)6253 63011 y Fk(=)p Fd(A)p Fi(x)8081
63122 y Fb(r)8850 63011 y Fk(to)308 b(satisfy)f(a)h(traf)-25
b(\002c)308 b(engineering)h(goal.)486 b(In)-2022 64174
y(the)306 b(full)f(v)-15 b(ersion)305 b(of)h(this)f(paper)h([4])f(we)h
(sho)-25 b(w)306 b(ho)-25 b(w)306 b(to)g(assign)f(demands)-2022
65336 y(nearly)277 b(optimal)h(to)f(a)-20 b(v)-25 b(ailable)279
b(netw)-10 b(ork)278 b(locations)f(for)g(a)g(number)h(of)f(CPs)-2022
66498 y(in)249 b(re)-15 b(g)-5 b(ards)249 b(to)g(dif)-25
b(ferent)249 b(netw)-10 b(ork)250 b(metrics.)-2022 69100
y Fl(3.)1328 b(EV)-179 b(ALU)-80 b(A)-126 b(TION)-1026
70539 y Fj(CaTE)234 b Fk(allo)-25 b(ws)235 b(ISPs)f(and)h(CPs)f(to)h
(optimize)g(for)g(a)g(number)g(of)g(netw)-10 b(ork)-2022
71701 y(metrics,)355 b(such)334 b(as)g(link)g(utilization,)356
b(path)335 b(length,)356 b(and)335 b(path)f(delay)-65
b(.)566 b(W)-80 b(e)p 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 28530 10852
a @beginspecial 50 @llx 50 @lly 635 @urx 365 @ury 2151
@rwi @setspecial
%%BeginDocument: figs/TrafficHop_r-2+bgp-RR_min_Top10.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: plots/TrafficHop_r-2+bgp-RR_min_Top10.eps
%%Creator: gnuplot 4.4 patchlevel 2
%%CreationDate: Fri Nov 11 11:12:02 2011
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 635 365
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color false def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape false def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -106 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (plots/TrafficHop_r-2+bgp-RR_min_Top10.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 2)
  /Author (ingmar)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Fri Nov 11 11:12:02 2011)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 635 50 lineto 635 365 lineto 50 365 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {Gshow} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} def
/Gswidth {dup type /stringtype eq {stringwidth} {pop (n) stringwidth} ifelse} def
/MFwidth {0 exch { dup 5 get 3 ge { 5 get 3 eq { 0 } { pop } ifelse }
 {dup 3 get{dup dup 0 get findfont exch 1 get scalefont setfont
     6 get Gswidth pop add} {pop} ifelse} ifelse} forall} def
/MLshow { currentpoint stroke M
  0 exch R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R
  Blacktext {gsave 0 setgray MFshow grestore} {MFshow} ifelse } bind def
/XYsave    { [( ) 1 2 true false 3 ()] } bind def
/XYrestore { [( ) 1 2 true false 4 ()] } bind def
end
%%EndProlog
gnudict begin
gsave
doclip
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 320 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
1568 1024 M
9555 0 V
stroke
LTb
1568 1024 M
63 0 V
9492 0 R
-63 0 V
stroke
1376 1024 M
[ [(Helvetica) 320.0 0.0 true true 0 ( 0)]
] -106.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1568 2002 M
9555 0 V
stroke
LTb
1568 2002 M
63 0 V
9492 0 R
-63 0 V
stroke
1376 2002 M
[ [(Helvetica) 320.0 0.0 true true 0 ( 0.1)]
] -106.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1568 2980 M
9555 0 V
stroke
LTb
1568 2980 M
63 0 V
9492 0 R
-63 0 V
stroke
1376 2980 M
[ [(Helvetica) 320.0 0.0 true true 0 ( 0.2)]
] -106.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1568 3959 M
9555 0 V
stroke
LTb
1568 3959 M
63 0 V
9492 0 R
-63 0 V
stroke
1376 3959 M
[ [(Helvetica) 320.0 0.0 true true 0 ( 0.3)]
] -106.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1568 4937 M
6420 0 V
2943 0 R
192 0 V
stroke
LTb
1568 4937 M
63 0 V
9492 0 R
-63 0 V
stroke
1376 4937 M
[ [(Helvetica) 320.0 0.0 true true 0 ( 0.4)]
] -106.7 MRshow
1.000 UL
LTb
1.000 UL
LTa
1568 5915 M
9555 0 V
stroke
LTb
1568 5915 M
63 0 V
9492 0 R
-63 0 V
stroke
1376 5915 M
[ [(Helvetica) 320.0 0.0 true true 0 ( 0.5)]
] -106.7 MRshow
1.000 UL
LTb
2165 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
2165 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (0)]
] -106.7 MCshow
1.000 UL
LTb
3360 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
3360 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (1)]
] -106.7 MCshow
1.000 UL
LTb
4554 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
4554 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (2)]
] -106.7 MCshow
1.000 UL
LTb
5748 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
5748 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (3)]
] -106.7 MCshow
1.000 UL
LTb
6943 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
6943 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (4)]
] -106.7 MCshow
1.000 UL
LTb
8137 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
8137 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (5)]
] -106.7 MCshow
1.000 UL
LTb
9331 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
9331 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (6)]
] -106.7 MCshow
1.000 UL
LTb
10526 1024 M
0 63 V
0 4828 R
0 -63 V
stroke
10526 704 M
[ [(Helvetica) 320.0 0.0 true true 0 (7)]
] -106.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
1568 5915 N
0 -4891 V
9555 0 V
0 4891 V
-9555 0 V
Z stroke
LCb setrgbcolor
256 3469 M
currentpoint gsave translate -270 rotate 0 0 moveto
[ [(Helvetica) 320.0 0.0 true true 0 (Fraction of Traffic)]
] -106.7 MCshow
grestore
LTb
LCb setrgbcolor
6345 224 M
[ [(Helvetica) 320.0 0.0 true true 0 (Path Length in Traversed Backbone Links)]
] -106.7 MCshow
LTb
1.000 UP
1.000 UL
LTb
% Begin plot #1
1.000 UL
LT0
LCb setrgbcolor
10100 5692 M
[ [(Helvetica) 260.0 0.0 true true 0 (Path)]
] -86.7 MRshow
LT0
10292 5612 447 160 BoxFill
0.00 0.00 0.00 C 10292 5612 N
447 0 V
0 160 V
-447 0 V
0 -160 V
Z stroke
LT0
1687 1024 240 104 BoxFill
0.00 0.00 0.00 C 1687 1024 N
0 103 V
239 0 V
0 -103 V
-239 0 V
Z stroke
LT0
2882 1024 240 1 BoxFill
0.00 0.00 0.00 C 2882 1024 N
239 0 V
-239 0 V
Z stroke
LT0
4076 1024 240 1888 BoxFill
0.00 0.00 0.00 C 4076 1024 N
0 1887 V
239 0 V
0 -1887 V
-239 0 V
Z stroke
LT0
5271 1024 239 4528 BoxFill
0.00 0.00 0.00 C 5271 1024 N
0 4527 V
238 0 V
0 -4527 V
-238 0 V
Z stroke
LT0
6465 1024 240 2810 BoxFill
0.00 0.00 0.00 C 6465 1024 N
0 2809 V
239 0 V
0 -2809 V
-239 0 V
Z stroke
LT0
7659 1024 240 373 BoxFill
0.00 0.00 0.00 C 7659 1024 N
0 372 V
239 0 V
0 -372 V
-239 0 V
Z stroke
LT0
8854 1024 240 78 BoxFill
0.00 0.00 0.00 C 8854 1024 N
0 77 V
239 0 V
0 -77 V
-239 0 V
Z stroke
LT0
10048 1024 240 9 BoxFill
0.00 0.00 0.00 C 10048 1024 N
0 8 V
239 0 V
0 -8 V
-239 0 V
Z stroke
LT0
11123 1024 1 1 BoxFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT0
11123 1024 1 1 BoxFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT0
% End plot #1
% Begin plot #2
1.000 UL
LT1
LCb setrgbcolor
10100 5372 M
[ [(Helvetica) 260.0 0.0 true true 0 (Delay)]
] -86.7 MRshow
LT1
10292 5292 447 160 80 -45 1 PatternFill
0.00 0.00 0.00 C 10292 5292 N
447 0 V
0 160 V
-447 0 V
0 -160 V
Z stroke
LT1
1926 1024 240 104 80 -45 1 PatternFill
0.00 0.00 0.00 C 1926 1024 N
0 103 V
239 0 V
0 -103 V
-239 0 V
Z stroke
LT1
3121 1024 240 1 80 -45 1 PatternFill
0.00 0.00 0.00 C 3121 1024 N
239 0 V
-239 0 V
Z stroke
LT1
4315 1024 240 1601 80 -45 1 PatternFill
0.00 0.00 0.00 C 4315 1024 N
0 1600 V
239 0 V
0 -1600 V
-239 0 V
Z stroke
LT1
5509 1024 240 4454 80 -45 1 PatternFill
0.00 0.00 0.00 C 5509 1024 N
0 4453 V
239 0 V
0 -4453 V
-239 0 V
Z stroke
LT1
6704 1024 240 3168 80 -45 1 PatternFill
0.00 0.00 0.00 C 6704 1024 N
0 3167 V
239 0 V
0 -3167 V
-239 0 V
Z stroke
LT1
7898 1024 240 375 80 -45 1 PatternFill
0.00 0.00 0.00 C 7898 1024 N
0 374 V
239 0 V
0 -374 V
-239 0 V
Z stroke
LT1
9093 1024 239 78 80 -45 1 PatternFill
0.00 0.00 0.00 C 9093 1024 N
0 77 V
238 0 V
0 -77 V
-238 0 V
Z stroke
LT1
10287 1024 240 9 80 -45 1 PatternFill
0.00 0.00 0.00 C 10287 1024 N
0 8 V
239 0 V
0 -8 V
-239 0 V
Z stroke
LT1
11123 1024 1 1 80 -45 1 PatternFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT1
11123 1024 1 1 80 -45 1 PatternFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT1
% End plot #2
% Begin plot #3
1.000 UL
LT2
LCb setrgbcolor
10100 5052 M
[ [(Helvetica) 260.0 0.0 true true 0 (Utilization)]
] -86.7 MRshow
LT2
10292 4972 447 160 40 45 2 PatternFill
0.00 0.00 0.00 C 10292 4972 N
447 0 V
0 160 V
-447 0 V
0 -160 V
Z stroke
LT2
2165 1024 240 100 40 45 2 PatternFill
0.00 0.00 0.00 C 2165 1024 N
0 99 V
239 0 V
0 -99 V
-239 0 V
Z stroke
LT2
3360 1024 239 1 40 45 2 PatternFill
0.00 0.00 0.00 C 3360 1024 N
238 0 V
-238 0 V
Z stroke
LT2
4554 1024 240 1164 40 45 2 PatternFill
0.00 0.00 0.00 C 4554 1024 N
0 1163 V
239 0 V
0 -1163 V
-239 0 V
Z stroke
LT2
5748 1024 240 4061 40 45 2 PatternFill
0.00 0.00 0.00 C 5748 1024 N
0 4060 V
239 0 V
0 -4060 V
-239 0 V
Z stroke
LT2
6943 1024 240 3604 40 45 2 PatternFill
0.00 0.00 0.00 C 6943 1024 N
0 3603 V
239 0 V
0 -3603 V
-239 0 V
Z stroke
LT2
8137 1024 240 728 40 45 2 PatternFill
0.00 0.00 0.00 C 8137 1024 N
0 727 V
239 0 V
0 -727 V
-239 0 V
Z stroke
LT2
9331 1024 240 101 40 45 2 PatternFill
0.00 0.00 0.00 C 9331 1024 N
0 100 V
239 0 V
0 -100 V
-239 0 V
Z stroke
LT2
10526 1024 240 30 40 45 2 PatternFill
0.00 0.00 0.00 C 10526 1024 N
0 29 V
239 0 V
0 -29 V
-239 0 V
Z stroke
LT2
11123 1024 1 2 40 45 2 PatternFill
0.00 0.00 0.00 C 11123 1024 N
0 1 V
0 -1 V
Z stroke
LT2
11123 1024 1 1 40 45 2 PatternFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT2
% End plot #3
% Begin plot #4
1.000 UL
LT3
LCb setrgbcolor
10100 4732 M
[ [(Helvetica) 260.0 0.0 true true 0 (Original)]
] -86.7 MRshow
LT3
1 10292 4652 447 160 BoxColFill
0.00 0.00 0.00 C 10292 4652 N
447 0 V
0 160 V
-447 0 V
0 -160 V
Z stroke
LT3
1 2404 1024 240 56 BoxColFill
0.00 0.00 0.00 C 2404 1024 N
0 55 V
239 0 V
0 -55 V
-239 0 V
Z stroke
LT3
1 3598 1024 240 1 BoxColFill
0.00 0.00 0.00 C 3598 1024 N
239 0 V
-239 0 V
Z stroke
LT3
1 4793 1024 240 967 BoxColFill
0.00 0.00 0.00 C 4793 1024 N
0 966 V
239 0 V
0 -966 V
-239 0 V
Z stroke
LT3
1 5987 1024 240 3659 BoxColFill
0.00 0.00 0.00 C 5987 1024 N
0 3658 V
239 0 V
0 -3658 V
-239 0 V
Z stroke
LT3
1 7182 1024 239 3780 BoxColFill
0.00 0.00 0.00 C 7182 1024 N
0 3779 V
238 0 V
0 -3779 V
-238 0 V
Z stroke
LT3
1 8376 1024 240 1016 BoxColFill
0.00 0.00 0.00 C 8376 1024 N
0 1015 V
239 0 V
0 -1015 V
-239 0 V
Z stroke
LT3
1 9570 1024 240 236 BoxColFill
0.00 0.00 0.00 C 9570 1024 N
0 235 V
239 0 V
0 -235 V
-239 0 V
Z stroke
LT3
1 10765 1024 240 75 BoxColFill
0.00 0.00 0.00 C 10765 1024 N
0 74 V
239 0 V
0 -74 V
-239 0 V
Z stroke
LT3
1 11123 1024 1 1 BoxColFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT3
1 11123 1024 1 1 BoxColFill
0.00 0.00 0.00 C 11123 1024 N
Z stroke
LT3
% End plot #4
1.000 UL
LTb
1568 5915 N
0 -4891 V
9555 0 V
0 4891 V
-9555 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica

%%EndDocument
 @endspecial 27627 13121 a Fi(Figur)-18 b(e)250 b(2:)308
b(T)-74 b(raf\002c)250 b(distrib)-20 b(ution)248 b(per)i(path)e(length)
h(in)g(a)h(T)-18 b(ier)-37 b(-1)249 b(ISP)-110 b(.)p
0 TeXcolorgray 27201 14929 a Fk(quantify)341 b(the)f(ef)-25
b(fects)340 b(of)g Fj(CaTE)f Fk(when)i(using)f(each)h(one)f(of)g(these)
g(met-)27201 16091 y(rics)273 b(indi)-25 b(vidually)274
b(in)g(a)f(lar)-18 b(ge)274 b(T)-35 b(ier)-20 b(-1)273
b(ISP)-111 b(.)273 b(Note)h(that)g(our)f(system)g(design)27201
17253 y(also)304 b(allo)-25 b(ws)304 b(for)g(a)g(combination)i(of)d
(metrics.)474 b(W)-80 b(e)305 b(focus)f(on)g(the)g(top)g
Fc(10)27201 18416 y Fk(CPs,)j(as)296 b(these)g(ha)-20
b(v)-15 b(e)297 b(a)g(signi\002cant)f(share)g(of)g(the)g(o)-15
b(v)g(erall)297 b(traf)-25 b(\002c)296 b([4].)449 b(T)-80
b(o)27201 19578 y(e)-25 b(v)g(aluate)227 b(the)f(ef)-25
b(fecti)g(v)-15 b(eness)226 b(of)f Fj(CaTE)p Fk(,)f(we)i(observ)-15
b(e)226 b(netw)-10 b(ork)225 b(traf)-25 b(\002c)226 b(and)27201
20740 y(measure)376 b(netw)-10 b(ork)376 b(quantities)f(such)h(as)e
(maximum)i(link)g(utilization)f(as)27201 21903 y(the)359
b(CPs)e(apply)i(their)f(serv)-15 b(er)358 b(selection)h(algorithms.)637
b(W)-80 b(e)359 b(assume)f(that)27201 23065 y(the)318
b(CPs)e(follo)-25 b(w)317 b(the)g(recommendations)i(pro)-15
b(vided)318 b(by)f(the)g(ISP)-111 b(,)317 b(per)h(re-)27201
24227 y(quest,)245 b(and)e(estimate)h(the)f(ef)-25 b(fects)244
b(on)f(these)g(netw)-10 b(ork)244 b(quantities.)307 b(Similar)27201
25389 y(observ)-25 b(ations)250 b(are)f(made)h(when)g(applying)g
Fj(CaTE)e Fk(to)i(the)f(top)g Fc(1)g Fk(and)h Fc(100)p
Fk(.)28198 26552 y(In)227 b(Figure)i(2,)j(we)c(plot)h(the)f(traf)-25
b(\002c)228 b(distrib)-20 b(ution)228 b(per)g(path)g(length)h(before)
27201 27714 y(we)248 b(apply)f Fj(CaTE)g Fk(\(Original\))g(and)g(when)h
(we)f(apply)h Fj(CaTE)e Fk(using)h(one)g(of)27201 28876
y(the)238 b(netw)-10 b(ork)238 b(metrics)f(mentioned)h(abo)-15
b(v)g(e.)306 b(In)237 b(all)g(cases,)j Fj(CaTE)c Fk(redirects)27201
30039 y(the)333 b(traf)-25 b(\002c)332 b(to)-25 b(w)-10
b(ards)333 b(paths)f(with)g(the)h(same)f(or)g(e)-25 b(v)-15
b(en)333 b(shorter)f(path,)354 b(thus)27201 31201 y(the)303
b(o)-15 b(v)g(erall)303 b(traf)-25 b(\002c)302 b(is)f(reduced.)470
b(Our)302 b(results)f(also)h(sho)-25 b(w)303 b(that)f(the)g(delay)27201
32363 y(as)242 b(well)h(as)f(the)h(maximum)g(link)g(utilization)g(are)f
(reduced)i(as)e(the)g(traf)-25 b(\002c)243 b(is)27201
33526 y(shifted)317 b(from)g(highly)g(utilized)h(links)e(to)h(less)f
(utilized)i(ones.)513 b(In)316 b(the)i(full)27201 34688
y(v)-15 b(ersion)233 b(of)g(this)g(paper)g([4])g(we)h(present)f(a)g
(much)h(lar)-18 b(ger)233 b(set)g(of)g(results)f(and)27201
35850 y(e)-25 b(v)g(aluate)251 b Fj(CaTE)e Fk(in)g(other)g(netw)-10
b(orks)249 b(and)h(under)g(dif)-25 b(ferent)249 b(demands.)27201
38507 y Fl(4.)1329 b(FUTURE)332 b(W)-13 b(ORK)28198 39946
y Fk(T)-80 b(o)259 b(capitalize)i(on)f(the)g(substantial)g(performance)
g(bene\002ts)g(that)g Fj(CaTE)27201 41108 y Fk(of)-25
b(fers)285 b(to)h(both)f(CPs)g(and)h(ISPs)e(as)i(well)g(as)f
(end-users,)294 b(we)286 b(are)g(currently)27201 42271
y(b)-20 b(uilding)190 b(a)g(system)f(that)g(allo)-25
b(ws)190 b(all)f(the)h(in)-40 b(v)-20 b(olv)-15 b(ed)191
b(parties)e(to)g(utilize)h Fj(CaTE)p Fk(.)27201 43433
y(Moreo)-15 b(v)g(er)-40 b(,)229 b(we)223 b(are)g(in)-40
b(v)-15 b(estig)-5 b(ating)224 b(ho)-25 b(w)223 b(to)g(install)f
Fj(CaTE)g Fk(in)h(a)g(number)g(of)27201 44595 y(ISPs)376
b(and)h(CPs)f(and)h(report)g(the)g(performance)h(bene\002ts)f(for)f
(both)h(ISPs)27201 45758 y(and)239 b(CPs)f(in)g(the)h(wild.)306
b(W)-80 b(e)239 b(are)g(also)g(interested)f(in)h(e)-25
b(v)g(aluating)240 b Fj(CaTE)e Fk(for)27201 46920 y(ISP-ISP)248
b(collaboration.)27201 49577 y Fl(5.)1329 b(REFERENCES)p
0 TeXcolorgray 27201 50351 a Fh([1])p 0 TeXcolorgray
498 w(B.)221 b(Ager)-35 b(,)222 b(W)-81 b(.)221 b(M\374hlbauer)-35
b(,)222 b(G.)g(Smaragdakis,)g(and)f(S.)i(Uhlig.)f(Comparing)28732
51348 y(DNS)h(Resolv)-13 b(ers)221 b(in)h(the)f(W)-35
b(ild.)222 b(In)f Fg(Pr)-40 b(oc.)222 b(of)g(A)-27 b(CM)221
b(IMC)p Fh(,)g(2010.)p 0 TeXcolorgray 27201 52455 a([2])p
0 TeXcolorgray 498 w(B.)g(Ager)-35 b(,)222 b(W)-81 b(.)221
b(M\374hlbauer)-35 b(,)222 b(G.)g(Smaragdakis,)g(and)f(S.)i(Uhlig.)f(W)
-71 b(eb)221 b(Content)28732 53451 y(Cartograph)l(y.)f(In)h
Fg(Pr)-40 b(oc.)223 b(of)e(A)-27 b(CM)221 b(IMC)p Fh(,)g(2011.)p
0 TeXcolorgray 27201 54558 a([3])p 0 TeXcolorgray 498
w(B.)g(F)-13 b(ortz)222 b(and)f(M.)h(Thorup.)f(Internet)h(T)-31
b(raf)-22 b(\002c)221 b(Engineering)g(by)g(Optimizing)28732
55554 y(OSPF)i(W)-71 b(eights.)222 b(In)f Fg(Pr)-40 b(oc.)223
b(of)e(IEEE)h(INFOCOM)p Fh(,)f(2000.)p 0 TeXcolorgray
27201 56661 a([4])p 0 TeXcolorgray 498 w(B.)g(Frank,)h(I.)g(Poese,)h
(G.)f(Smaragdakis,)g(S.)h(Uhlig,)f(and)f(A.)h(Feldmann.)28732
57657 y(Content-a)-13 b(w)k(are)222 b(T)-31 b(raf)-22
b(\002c)221 b(Engineering.)h Fg(CoRR)p Fh(,)f(abs/1202.1464,)g(2012.)p
0 TeXcolorgray 27201 58764 a([5])p 0 TeXcolorgray 498
w(A.)h(Gerber)g(and)f(R.)g(Do)-13 b(v)g(erspik)k(e.)222
b(T)-31 b(raf)-22 b(\002c)222 b(T)-71 b(ypes)222 b(and)f(Gro)-22
b(wth)222 b(in)f(Backbone)28732 59761 y(Netw)-9 b(orks.)223
b(In)e Fg(Pr)-40 b(of)-13 b(.)222 b(of)g(OFC/NFOEC)p
Fh(,)g(2011.)p 0 TeXcolorgray 27201 60868 a([6])p 0 TeXcolorgray
498 w(E.)g(Nygren,)f(R.)h(K.)g(Sitaraman,)h(and)e(J.)h(Sun.)g(The)f
(Akamai)h(Netw)-9 b(ork:)276 b(A)28732 61864 y(Platform)222
b(for)f(High-performance)g(Internet)g(Applications.)i
Fg(SIGOPS)f(Oper)-98 b(.)28732 62860 y(Syst.)222 b(Re)-13
b(v)-66 b(.)p Fh(,)223 b(44\(3\),)e(2010.)p 0 TeXcolorgray
27201 63967 a([7])p 0 TeXcolorgray 498 w(I.)h(Poese,)g(B.)g(Frank,)g
(B.)f(Ager)-35 b(,)222 b(G.)g(Smaragdakis,)h(and)e(A.)h(Feldmann.)28732
64963 y(Impro)-13 b(ving)220 b(Content)h(Deli)-22 b(v)-13
b(ery)221 b(using)h(Pro)-13 b(vider)-18 b(-Aided)221
b(Distance)28732 65960 y(Information.)g(In)g Fg(Pr)-40
b(oc.)223 b(of)e(A)-27 b(CM)221 b(IMC)p Fh(,)g(2010.)p
0 TeXcolorgray 27201 67067 a([8])p 0 TeXcolorgray 498
w(A.)h(Qureshi,)h(R.)e(W)-71 b(eber)-35 b(,)222 b(H.)g(Balakrishnan,)g
(J.)g(Guttag,)g(and)f(B.)h(Maggs.)28732 68063 y(Cutting)f(the)h
(Electric)g(Bill)g(for)f(Internet-scale)h(Systems.)h(In)e
Fg(Pr)-40 b(oc.)223 b(of)e(A)-27 b(CM)28732 69059 y(SIGCOMM)p
Fh(,)221 b(2009.)p 0 TeXcolorgray 0 TeXcolorgray eop
end end
%%Trailer

end

userdict /end-hook known{end-hook}if
%%EOF
